{
  "version": 3,
  "sources": ["../src/backup.ts", "../src/npm-package.ts", "../src/op-queue-pipeline.ts", "../src/arg-parse-utils.ts", "../src/custom-utils.ts", "../src/file-handle.ts", "../src/arg-parse.ts"],
  "sourcesContent": ["#!/usr/bin/env node\n\nimport { cwd } from \"process\"\nimport { OptionValues } from \"commander\"\nimport * as npm from \"./npm-package\"\nimport * as pkgFS from \"./file-handle\"\nimport * as Q from \"./op-queue-pipeline\"\nimport * as cli from \"./arg-parse\"\n\n/**\n * @fileoverview - The core function of the NPM package backup tool, packing downloaded pkgs with all deps for offline install.\n * Download the NPM pkg normally with network connection to NPM registry, installing all preferred dependencies using `--global-style`. Then add all of the deps to the pkg's `package.json` `bundleDependencies` field. Then use `npm pack` to save all of the deps in the tar archive of the pkg.\n * This will require, network access, npm command from a shell child process, and file system read and write.\n */\n\n// async IIFE used to substitute top-level await:\n;(async () => {\n  let tmpDir: pkgFS.FSPath\n  const options = await cli.command()\n  const opts = options.opts?.() ?? {}\n  /**\n   * @summary Used for verbose mode, logs output messages for every Op.\n   * @param args { Array<any> }\n   */\n  const verboseLog = async (...args: unknown[]) => {\n    if (opts.verbose) console.log(...args)\n  }\n\n  // using the debug CLI option implies verbose:\n  const env: Q.OpsQueueEnvSettings = {\n    useVerbose: Boolean(opts.verbose) || Boolean(opts.debug),\n    useDebug: Boolean(opts.debug) || opts.verbose >= 2,\n    useNestingDebug: opts.debug >= 2 || opts.verbose >= 3\n  }\n\n  // make verbose and debug compatible with npm:\n  opts.verbose = \"\"\n  opts.debug = \"\"\n\n  await new Q.OpsPipeline(\"Back Up Packages\", {\n    ...env,\n    useNestingLog: true /* , useNestingDebug: true, useNestingVerbose: true */\n  })\n    .pipe(cli.argParserQ)\n    .pipe((command: cli.Command) => {\n      // make verbose and debug compatible with npm:\n      const opts = command.opts()\n      opts.verbose = \"\"\n      opts.debug = \"\"\n\n      // save values from any used aliases:\n      opts.dest = opts.dest ?? opts.save ?? opts.packDestination ?? opts.packageDestination\n      opts.packDestination = opts.packDestination ?? opts.dest ?? opts.save ?? opts.packageDestination\n      // have side effect in npm cli:\n      delete opts.save\n      delete opts.packageDestination\n\n      return { opts, args: command.args }\n    }, \"Convert CLI Responce\")\n    .pipe(\n      new Q.OpsPipeline(\"Finding Packages\")\n        /* \n        .pipe(async ({ opts, args }: { opts: OptionValues, args: string[] }) => {\n          // find all matching pkgs:\n          return {\n            opts,\n            pkgs: await npm.pkgSearch(...args)\n          }\n        },\"Searching For Packages\")\n        */\n        .pipe(npm.pkgSearchQ)\n        /*\n        .pipe(async ({ opts, pkgs }: { opts: OptionValues, pkgs: npm.Pkg[] }) => {\n          // confirm pkgs and pkg versions:\n          return { opts, pkgs: await npm.pkgConfirm(...pkgs) }\n        }, \"Confirming Packages\")\n        */\n        .pipe(npm.pkgConfirmQ)\n    )\n    .pipe(\n      new Q.OpsPipeline(\"Backup Process\")\n        .pipe(\n          new Q.OpsPipeline(\"Preparing For Backup\").pipe(\n            async ({ opts, pkgs }: { opts: OptionValues; pkgs: npm.Pkg[] }) => {\n              // create tmp dir:\n              tmpDir = await pkgFS.makeTmpDir()\n\n              return {\n                opts,\n                pkgs,\n                tmpDir\n              }\n            },\n            \"Creating Temporary Install Directory\"\n          )\n          /*\n          .pipe(async ({ opts, pipe: { pkgs, tmpDir } }: { opts: OptionValues , pipe: { pkgs: npm.Pkg[], tmpDir: pkgFS.FSPath } }) => {\n            // create temporary package.json and node_modules to install to:\n            return {\n              opts,\n              pipe: {\n                pkgs,\n                tmpDir,\n                init: await npm.pkgTmpInit(tmpDir)\n              }\n            }\n          }, \"Creating Temporary NPM Package To Install To\")\n          .fallback((...args) => args, \"Using Package Install Without package.json\", { useLoopback: true })\n          */\n        )\n        .pipe(\n          new Q.OpsPipeline(\"Backing Up Packages\")\n            /*\n            .pipe(async ({ opts, pipe: { pkgs, tmpDir } }: { opts: OptionValues, pipe: { pkgs: npm.Pkg[], tmpDir: pkgFS.FSPath } }) => {\n              // install the pkgs to the temp dir:\n              return { opts, pkgs: await npm.pkgInstall({ pkgs, location: tmpDir, opts }) }\n            },\"Installing Packages\")\n            */\n            .pipe(npm.pkgInstallQ)\n            .pipe(async ({ opts, pkgs, tmpDir }: { opts: OptionValues; pkgs: npm.Pkg[]; tmpDir: pkgFS.FSPath }) => {\n              // modify the bundle deps of each pkg:\n              for (const pkg of pkgs) {\n                const pkgPath = pkg.path\n                const pkgJSON = await pkgFS.readPkgJSON(pkgPath)\n\n                if (pkgJSON) {\n                  // modify package.json:\n                  if (opts.save) {\n                    // add pkgs to bundled deps:\n                    if (\n                      (\"bundledDependencies\" as keyof pkgFS.NPMPackageJSON) in pkgJSON &&\n                      pkgJSON.bundledDependencies instanceof Array\n                    ) {\n                      // use the pre-existing field:\n                      if (opts.saveProd) pkgJSON.bundledDependencies.push(...Object.keys(pkgJSON.dependencies))\n                      if (opts.saveDev) pkgJSON.bundledDependencies.push(...Object.keys(pkgJSON.devDependencies))\n                      if (opts.saveOptional)\n                        pkgJSON.bundledDependencies.push(...Object.keys(pkgJSON.optionalDependencies))\n                      if (opts.savePeer) pkgJSON.bundledDependencies.push(...Object.keys(pkgJSON.peerDependencies))\n                    } else {\n                      // create a `bundleDependencies` field in the package.json or use the pre-existing field:\n                      pkgJSON.bundleDependencies =\n                        pkgJSON.bundleDependencies instanceof Array ? pkgJSON.bundleDependencies : []\n\n                      if (opts.saveProd) pkgJSON.bundleDependencies.push(...Object.keys(pkgJSON.dependencies))\n                      if (opts.saveDev) pkgJSON.bundleDependencies.push(...Object.keys(pkgJSON.devDependencies))\n                      if (opts.saveOptional)\n                        pkgJSON.bundleDependencies.push(...Object.keys(pkgJSON.optionalDependencies))\n                      if (opts.savePeer) pkgJSON.bundleDependencies.push(...Object.keys(pkgJSON.peerDependencies))\n                    }\n                  }\n                }\n\n                await pkgFS.writePkgJSON(pkgPath, pkgJSON)\n              }\n\n              return { opts, pkgs, tmpDir }\n            }, \"Preparing Packages\")\n            .pipe(async ({ opts, pkgs, tmpDir }: { opts: OptionValues; pkgs: npm.Pkg[]; tmpDir: pkgFS.FSPath }) => {\n              // pack each pkg:\n              for (const pkg of pkgs) {\n                await npm.pkgPack({\n                  pkg,\n                  location: opts.dest ?? tmpDir,\n                  opts\n                })\n              }\n\n              return { pkgs, opts, tmpDir }\n            }, \"Packing Packages\")\n            .fallback(async ({ opts, pkgs, tmpDir }: { opts: OptionValues; pkgs: npm.Pkg[]; tmpDir: pkgFS.FSPath }) => {\n              // move each pkg to destination:\n              for (const pkg of pkgs) {\n                await pkgFS.moveToDir(pkg.path, opts.dest ?? cwd())\n              }\n\n              return { pkgs, opts, tmpDir }\n            }, \"Moving Packages\")\n        )\n        .pipe(\n          async (...args) => {\n            // const [{ tmpDir }] = args\n            await pkgFS.removeDir(tmpDir)\n\n            return args\n          },\n          \"Clean Up After Backup\",\n          { useLoopback: true }\n        )\n        .pipe(\n          (...args) => {\n            verboseLog(\"Finished Backup!\")\n\n            return args\n          },\n          \"Output Success\",\n          { useLoopback: true }\n        )\n    )\n    .fallback(\n      async (...args) => {\n        verboseLog(\"FATAL ERROR!\")\n\n        await pkgFS.removeDir(tmpDir)\n\n        return args\n      },\n      \"Clean Up After Error\",\n      { useLoopback: true }\n    )\n    .start({\n      argv: process.argv,\n      parser: cli.commander\n    })\n})()\n", "import * as path from \"path\"\nimport * as semver from \"semver\"\nimport inquirer from \"inquirer\"\nimport { cwd, chdir } from \"process\"\nimport type { OptionValues } from \"commander\"\nimport { OpsPipeline as Q } from \"./op-queue-pipeline\"\nimport { argvSanitize, argSanitize } from \"./arg-parse-utils\"\nimport { ExecFileAsyncResult, ExecFileResult, utilPromise } from \"./custom-utils\"\nimport type { FSPath } from \"./file-handle\"\n\n/**\n  @debrief - This module has all of the NPM search, pkg installing, and other NPM commands.\n\n  * @todo\n  * Arguments:\n    * MVP:\n      * NPM pkgs\n      * target NPM pkg backup output dir\n      * deps to backup all or a mix of {production|development|optional|peer}\n      * version to get, eg: @ latest, or a list of versions to get\n    * \n    * Extra:\n      * multi-pkg backups, with many pkgs's deps installed and deduped\n      * chronlogical archive mode that backs up all versions {major.minor.patch}\n    * \n  * Run:\n    * sanitize user input:\n      * remove ALL characters that aren't used on NPM\n      * only allow: '.' '@', '/', '-', A-Z, a-z, and 0-9\n    * \n    * get user confirmation of desired pkgs:\n      * use NPM search for every string arg, to prevent misspelling\n      * use NPM view to confirm properly spelled pkgs\n    * \n    * create tmp dir for NPM pkg installs:\n      * mkdir\n      * cd into dir\n      * npm install using --global-style so the deps will be in the pkgs's dir in node_modules\n    * \n    * edit package.json files for every pkg to add all {production|optional|development} deps to bundeledDependencies field:\n      * use JSON.parse() to get deps\n      * edit object to add props\n      * use JSON.stringify() to rewrite package.json file\n    * \n    * make offline NPM pkg backup:\n      * use npm pack, adds pkg to NPM cache\n      * OR use tar -cwzvf /path/to/backup/dir NPM-pkg-dir\n      * -z is to select gzip compression\n      * this doesn't add pkg to NPM cache\n    *\n    * clean up tmp dir and move pkg backups to target dir:\n      * rm tmp npm install dir\n      * mv pkg backups to target dir\n  * \n*/\n\nconst { execFile } = utilPromise\n\n// all valid npm commands (excluding aliases):\ntype NPMCommand =\n  | \"access\"\n  | \"adduser\"\n  | \"audit\"\n  | \"bin\"\n  | \"bugs\"\n  | \"cache\"\n  | \"ci\"\n  | \"completion\"\n  | \"config\"\n  | \"dedupe\"\n  | \"deprecate\"\n  | \"diff\"\n  | \"dist-tag\"\n  | \"docs\"\n  | \"doctor\"\n  | \"edit\"\n  | \"exec\"\n  | \"explain\"\n  | \"explore\"\n  | \"find-dupes\"\n  | \"fund\"\n  | \"help\"\n  | \"help-search\"\n  | \"hook\"\n  | \"init\"\n  | \"install\"\n  | \"install-ci-test\"\n  | \"install-test\"\n  | \"link\"\n  | \"logout\"\n  | \"ls\"\n  | \"org\"\n  | \"outdated\"\n  | \"owner\"\n  | \"pack\"\n  | \"ping\"\n  | \"pkg\"\n  | \"prefix\"\n  | \"profile\"\n  | \"prune\"\n  | \"publish\"\n  | \"rebuild\"\n  | \"repo\"\n  | \"restart\"\n  | \"root\"\n  | \"run-script\"\n  | \"search\"\n  | \"set-script\"\n  | \"shrinkwrap\"\n  | \"star\"\n  | \"stars\"\n  | \"start\"\n  | \"stop\"\n  | \"team\"\n  | \"test\"\n  | \"token\"\n  | \"uninstall\"\n  | \"unpublish\"\n  | \"unstar\"\n  | \"update\"\n  | \"version\"\n  | \"view\"\n  | \"whoami\"\n  | \"npx\"\n\n// NPM package object:\nexport class Pkg {\n  /* \n  // only use chars allowed in NPM:\n  // only allow: A-Z, a-z, 0-9, '@', '/', '.', '_', and '-'.\n  // this regex will match not allowed chars.\n  static readonly unsafeNPMRegex: RegExp = /[^\\w@/_.-]/gi\n\n  // this regex will match only allowed chars.\n  static readonly NPMPkgRegex: RegExp = /^[\\w@/_.-]+/\n\n  \n  // this will do the post processing that NPMSearchPkgRegex needs to make a complete pkg name:\n  static NPMSearchPkg() {}\n  */\n\n  // this will find pkg name is NPM search results even in non-parseable mode:\n  // will even work with long and non-long mode,\n  // multi-line pkgs will need some further processing though...\n  static readonly NPMSearchPkgRegex: RegExp =\n    /^[\\w@/.-]+(?= {2,})|^[\\w@/.-]+.+(?:[\\r|\\n|\\r\\n][\\w@/.-]+(?=.+\\| +\\|).*)+/gim\n\n  // this will split each search result into a separate match:\n  static readonly NPMSearchResultRegex: RegExp = /(?=^[\\w@/.-]+(?!.*\\| +\\|)(?:.*\\n.+(?:\\| +\\|)+.*)*)/gim\n\n  // all valid NPM commands (excluding aliases):\n  static commands: string[] = [\n    \"access\",\n    \"adduser\",\n    \"audit\",\n    \"bin\",\n    \"bugs\",\n    \"cache\",\n    \"ci\",\n    \"completion\",\n    \"config\",\n    \"dedupe\",\n    \"deprecate\",\n    \"diff\",\n    \"dist-tag\",\n    \"docs\",\n    \"doctor\",\n    \"edit\",\n    \"exec\",\n    \"explain\",\n    \"explore\",\n    \"find-dupes\",\n    \"fund\",\n    \"help\",\n    \"help-search\",\n    \"hook\",\n    \"init\",\n    \"install\",\n    \"install-ci-test\",\n    \"install-test\",\n    \"link\",\n    \"logout\",\n    \"ls\",\n    \"org\",\n    \"outdated\",\n    \"owner\",\n    \"pack\",\n    \"ping\",\n    \"pkg\",\n    \"prefix\",\n    \"profile\",\n    \"prune\",\n    \"publish\",\n    \"rebuild\",\n    \"repo\",\n    \"restart\",\n    \"root\",\n    \"run-script\",\n    \"search\",\n    \"set-script\",\n    \"shrinkwrap\",\n    \"star\",\n    \"stars\",\n    \"start\",\n    \"stop\",\n    \"team\",\n    \"test\",\n    \"token\",\n    \"uninstall\",\n    \"unpublish\",\n    \"unstar\",\n    \"update\",\n    \"version\",\n    \"view\",\n    \"whoami\"\n  ]\n\n  // this sanitizes string input to the NPM child process:\n  static argSanitize = argSanitize\n  static argvSanitize = argvSanitize\n\n  #_id = \"\"\n  #_version = \"\"\n  view = \"\"\n  path: FSPath = \"\"\n  conf = false\n  search: string[] = []\n\n  set name(newName: string) {\n    this.#_id = Pkg.argSanitize(newName)\n  }\n\n  get name(): string {\n    return this.#_id\n  }\n\n  set version(newVer) {\n    this.#_version = semver.valid(semver.coerce(newVer)) ?? this.#_version\n  }\n\n  get version(): semver.SemVer[\"version\"] {\n    return this.#_version\n  }\n\n  constructor({ name }: { name: string }) {\n    // set the pkg name id to a shell and NPM safe string:\n    this.#_id = Pkg.argSanitize(name)\n  }\n\n  // npm init command to create install package:\n  static async init({\n    location,\n    opts,\n    raw\n  }: {\n    location: FSPath\n    opts: string[]\n    raw?: false | undefined\n  }): Promise<string>\n  static async init({\n    location,\n    opts,\n    raw\n  }: {\n    location: FSPath\n    opts: string[]\n    raw?: boolean\n  }): Promise<ExecFileResult>\n  static async init({\n    location,\n    opts,\n    raw\n  }: {\n    location: FSPath\n    opts: string[]\n    raw?: boolean\n  }): Promise<string | ExecFileResult> {\n    // save old working directory:\n    const currentDir = cwd()\n\n    // change current working directory to the npm init location:\n    chdir(location)\n\n    // init npm package.json in current directory:\n    const result = await this.npmCommand(\"init\", ...opts)\n\n    // change back to the old working directory:\n    chdir(currentDir)\n\n    if (raw) return result\n\n    return result.stdout\n  }\n\n  // npm command to install pkgs:\n  static async install({\n    pkgs,\n    location,\n    opts,\n    raw\n  }: {\n    pkgs: string[]\n    location: FSPath\n    opts: string[]\n    raw?: false | undefined\n  }): Promise<string>\n  static async install({\n    pkgs,\n    location,\n    opts,\n    raw\n  }: {\n    pkgs: string[]\n    location: FSPath\n    opts: string[]\n    raw?: boolean\n  }): Promise<ExecFileResult>\n  static async install({\n    pkgs,\n    location,\n    opts,\n    raw\n  }: {\n    pkgs: string[]\n    location: FSPath\n    opts: string[]\n    raw?: boolean\n  }): Promise<string | ExecFileResult> {\n    // save old working directory:\n    const currentDir = cwd()\n\n    // change current working directory to the npm init location:\n    chdir(location)\n\n    // install npm pkgs in current directory:\n    const result = await this.npmCommand(\"install\", ...opts, ...pkgs)\n\n    // change back to the old working directory:\n    chdir(currentDir)\n\n    if (raw) return result\n\n    return result.stdout\n  }\n\n  // npm info command to get information about a pkg in registry:\n  static async view({ pkg, opts, raw }: { pkg: string; opts: string[]; raw?: false | undefined }): Promise<string>\n  static async view({ pkg, opts, raw }: { pkg: string; opts: string[]; raw?: boolean }): Promise<ExecFileResult>\n  static async view({\n    pkg,\n    opts,\n    raw\n  }: {\n    pkg: string\n    opts: string[]\n    raw?: boolean\n  }): Promise<string | ExecFileResult> {\n    const result = await this.npmCommand(\"view\", ...opts, pkg)\n\n    if (raw) return result\n\n    return result.stdout\n  }\n\n  // npm search command to find pkgs in registry:\n  static async search({\n    terms,\n    opts,\n    raw\n  }: {\n    terms: string[]\n    opts: string[]\n    raw?: false | undefined\n  }): Promise<string>\n  static async search({ terms, opts, raw }: { terms: string[]; opts: string[]; raw?: boolean }): Promise<ExecFileResult>\n  static async search({\n    terms,\n    opts,\n    raw\n  }: {\n    terms: string[]\n    opts: string[]\n    raw?: boolean\n  }): Promise<string | ExecFileResult> {\n    const result = await this.npmCommand(\"search\", ...opts, ...terms)\n\n    if (raw) return result\n\n    return result.stdout\n  }\n\n  // npm command to install pkgs:\n  static async pack({\n    pkgs,\n    location,\n    opts,\n    cd,\n    raw\n  }: {\n    pkgs: string[]\n    location: FSPath\n    opts: string[]\n    cd?: boolean\n    raw?: false | undefined\n  }): Promise<string>\n  static async pack({\n    pkgs,\n    location,\n    opts,\n    cd,\n    raw\n  }: {\n    pkgs: string[]\n    location: FSPath\n    opts: string[]\n    cd?: boolean\n    raw?: boolean\n  }): Promise<ExecFileResult>\n  static async pack({\n    pkgs,\n    location,\n    opts,\n    cd,\n    raw\n  }: {\n    pkgs: string[]\n    location: FSPath\n    opts: string[]\n    cd?: boolean\n    raw?: boolean\n  }): Promise<string | ExecFileResult> {\n    let result: ExecFileResult\n\n    // use location as pack destination:\n    if (cd) {\n      // save old working directory:\n      const currentDir = cwd()\n\n      // change current working directory to the npm pack location:\n      chdir(location)\n\n      // pack pkgs in current directory:\n      result = await this.npmCommand(\"pack\", ...opts, ...pkgs)\n\n      // change back to the old working directory:\n      chdir(currentDir)\n    } else {\n      // pack pkgs in destination directory:\n      result = await this.npmCommand(\"pack\", `--pack-destination ${location}`, ...opts, ...pkgs)\n    }\n\n    if (raw) return result\n\n    return result.stdout\n  }\n\n  // reusable for npm cli:\n  static async npm(...args: string[]): ExecFileAsyncResult {\n    // exec using sanitized string:\n    return await execFile(\"npm\", this.argvSanitize(args))\n  }\n\n  // reusable for all npm commands:\n  static async npmCommand(command: NPMCommand, ...args: string[]): ExecFileAsyncResult {\n    // check a valid command is being used:\n    if (!this.commands.includes(command)) throw Error(\"Invalid or incompatible NPM command for NPM wrapper\")\n\n    return await this.npm(command, ...args)\n  }\n\n  // command aliases:\n  static innit = this.init\n  static create = this.init\n  static i = this.install\n  static in = this.install\n  static ins = this.install\n  static inst = this.install\n  static insta = this.install\n  static instal = this.install\n  static isnt = this.install\n  static isnta = this.install\n  static isntal = this.install\n  static isntall = this.install\n  static add = this.install\n  static v = this.view\n  static info = this.view\n  static show = this.view\n  static s = this.search\n  static se = this.search\n  static find = this.search\n}\n\n// convert Commander.js OptionValues to npm CLI compatible format:\nconst pkgComToOpt = (opts: OptionValues): string[] => {\n  // make npm compatable string array for options:\n  // use `--option` syntax, space if just a flag, should work for options with `=value`\n  // `--option  `, or `--option value`\n  return Object.entries(opts).map(opt => {\n    // make the OptionValue, eg `saveDev`, syntax\n    // npm compatible, eg `--save-dev`, syntax:\n    let optName = opt[0]\n    const optMatch = optName.match(/[A-Z]/g)\n\n    // replace in string:\n    if (optMatch) {\n      for (const match of optMatch) {\n        optName = optName.replace(match, `-${match.toLowerCase()}`)\n      }\n    }\n\n    // if the option doesn't have a value, use empty string:\n    const optVal = opt[1] !== \"\" ? ` ${opt[1]}` : \"\"\n\n    return `--${optName}` + optVal\n  })\n}\n\n// convert Pkg format to npm search compatible format:\nconst pkgSearchResults = (pkg: Pkg) => {\n  // use default values if they are no results:\n  const results = [\n    {\n      value: \"\", // empty string will result in no pkg being installed\n      name: `Do not install: \"${pkg.name}\"`\n    },\n    {\n      value: pkg.name, // just install the same pkg\n      name: `Install: \"${pkg.name}\"`\n    }\n  ]\n\n  // make sure there are results:\n  if (pkg.search.length > 0) {\n    // loop through each search result:\n    for (const res of pkg.search) {\n      // array from npm parseable output that is tab delimited:\n      const resFields = res.split(\"\\t\", 5)\n\n      results.push({\n        // pkg that is installed\n        value: resFields[0],\n        //  shown to user: pkg name, version, description, date published, maintainers:\n        name: `${resFields[0]}  ${resFields[4]}  ${resFields[1]}  ${resFields[3]}  ${resFields[2]}`\n      })\n    }\n  }\n\n  return results\n}\n\n// pack npm package:\nexport const pkgPack = async ({ pkg, opts, location }: { pkg: Pkg; location: FSPath; opts: OptionValues }) => {\n  return await Pkg.pack({ pkgs: [pkg.name], location, opts: pkgComToOpt(opts), cd: true })\n}\n\n// make a temporary npm package to install to:\nexport const pkgTmpInit = async (location: FSPath) => {\n  return await Pkg.init({ location, opts: [\"--yes\"] })\n}\n\n// searches pkg registry to find selected pkgs:\nexport const pkgSearchQ = new Q(\"Searching Registry For Packages\", {\n  useShell: true /* , useVerbose: true, useDebug: true */\n})\n  .pipe(({ opts, args }: { opts: OptionValues; args: string[] }) => {\n    const pkgs: Pkg[] = []\n    let i = 0\n\n    // create an array of Pkg object to the corresponding pkg to be installed:\n    for (const name of args) {\n      pkgs[i] = new Pkg({ name })\n      i++\n    }\n\n    return { opts, pkgs }\n  }, \"Creating Package List\")\n  .pipe(async ({ opts, pkgs }: { opts: OptionValues; pkgs: Pkg[] }) => {\n    // save the pkg search results data to each Pkg object:\n    for (const pkg of pkgs) {\n      // get newline separated results:\n      const foundPkgs = await Pkg.search({ opts: [\"--long\", \"--parseable\", \"--color=false\"], terms: [pkg.name] })\n\n      // split each result into an array index, and remove empty lines:\n      pkg.search = foundPkgs.split(\"\\n\").filter(res => res !== \"\")\n    }\n\n    return { opts, pkgs }\n  }, \"Searching For Possible Packages\")\n  .pipe(async ({ opts, pkgs }: { opts: OptionValues; pkgs: Pkg[] }) => {\n    // save the pkg info data to each Pkg object:\n    for (const pkg of pkgs) {\n      pkg.view = await Pkg.view({ pkg: pkg.name, opts: [\"--color=true\"] })\n    }\n\n    return { opts, pkgs }\n  }, \"Getting Info On Found Packages\")\n\nexport const pkgSearch = async (...pkgNames: string[]): Promise<Pkg[]> => {\n  return (await pkgSearchQ.start(pkgNames)).pipe[0] as Pkg[]\n}\n\n// confirm pkgs to be installed from registry:\nexport const pkgConfirmQ = new Q(\"Confirming Packages With User\" /* , { useVerbose: true, useDebug: true } */)\n  .pipe(async ({ opts, pkgs }: { opts: OptionValues; pkgs: Pkg[] }) => {\n    // ask user if pkg is correct:\n    for (const pkg of pkgs) {\n      pkg.conf = (\n        await inquirer.prompt({\n          type: \"confirm\",\n          name: \"conf\",\n          default: false,\n          message: `${pkg.view || pkg.name}\nIs this the correct package: \"${pkg.name}\"?`\n        })\n      ).conf\n    }\n\n    return { opts, pkgs }\n  }, \"Confirming Exact Packages\")\n  .pipe(async ({ opts, pkgs }: { opts: OptionValues; pkgs: Pkg[] }) => {\n    // ask user to select correct pkg from search results:\n    for (const pkg of pkgs) {\n      // default to not installing pkg:\n      const nullPkg = `Do not install: \"${pkg.name}\"`\n\n      // only correct unconfirmed pkgs:\n      if (!pkg.conf) {\n        pkg.name = (\n          await inquirer.prompt({\n            type: \"list\",\n            name: \"name\",\n            message: \"Select the correct package:\",\n            default: nullPkg,\n            choices: pkgSearchResults(pkg)\n          })\n        ).name\n\n        // empty string for pkg name will result in no pkg being installed\n        if (pkg.name !== \"\") pkg.conf = true\n      }\n    }\n\n    // remove deselected pkgs, reversing through array to prevent skipping indices:\n    for (let i = pkgs.length - 1; i >= 0; i--) {\n      // remove only unconfirmed pkgs:\n      if (pkgs[i].conf === false) pkgs.splice(i, 1)\n    }\n\n    return { opts, pkgs }\n  }, \"Substituting Incorrect Packages\")\n\nexport const pkgConfirm = async (...pkgList: Pkg[]) => {\n  return (await pkgConfirmQ.start(pkgList)).pipe[0]\n}\n\n// install pkgs:\nexport const pkgInstallQ = new Q(\"Installing Packages\", { useShell: true /* , useVerbose: true, useDebug: true */ })\n  .pipe(async ({ opts, pkgs, tmpDir: location }: { opts: OptionValues; pkgs: Pkg[]; tmpDir: FSPath }) => {\n    // make array of only the names of the pkgs:\n    const pkgNames = pkgs.map(pkg => pkg.name)\n\n    // make npm compatable string array for options:\n    // use `--option` syntax, space if just a flag, should work for options with `=value`\n    // `--option  `, or `--option value`\n    const npmOptions = pkgComToOpt(opts)\n\n    // log output from npm\n    // install using global-style to store pkg deps in each pkg's node_modules\n    // no-save will not create a package.json:\n    const res = await Pkg.install({\n      pkgs: pkgNames,\n      opts: [\"--global-style\", \"--no-save\", \"--color=true\", ...npmOptions],\n      location,\n      raw: true\n    })\n    console.error(res.stderr)\n    console.log(res.stdout)\n\n    return { opts, pkgs, location }\n  }, \"Installing\")\n  .pipe(({ opts, pkgs, location }: { opts: OptionValues; pkgs: Pkg[]; location: FSPath }) => {\n    for (const pkg of pkgs) {\n      pkg.path = path.join(location, \"node_modules\", pkg.name)\n    }\n\n    return { opts, pkgs }\n  }, \"Saving Install Location\")\n\n/*\nexport const pkgInstall = async ({ pkgs, opts, location }: { pkgs: Pkg[], opts: OptionValues, location: FSPath }) => {\n  return (await pkgInstallQ.start({ pkgs, opts, location })).pipe[0].pkgs\n}\n*/\n\n/*\n(async () => {\n  const p = await pkgSearch(\"npm\")\n  console.log(pkgSearchResults(p[0]))\n})()\n*/\n", "export * from \"./pipeline-types\"\nimport type {\n  Input,\n  Output,\n  Operation,\n  Op,\n  OpCurrier,\n  OpCaller,\n  OpResult,\n  Pipeline,\n  ImmutablePipeline,\n  OpsQueue,\n  FlOpsQueue,\n  QueueableOpLike,\n  QueueableOpsPipeline,\n  Trace,\n  TraceInstanceInfo,\n  TraceBack,\n  EnvSettings,\n  OpsQueueEnvSettings /* EmptyPipeline */\n} from \"./pipeline-types\"\n\n/**\n * @fileoverview - File System Operations and The Operations Queue: *  * All operations that affect the file system, or that have post-program effects, should be processed by the Operation Queue. The Ops-Q processes every external action, e.g.: making files and directories, and makes sure it's completed. But if there is an error of failure, the Ops-Q is designed to automatically handle it, if it's recoverable. The entire program is run inside of an Ops-Q, so wheen a SIGINT (or similar EVENT) is received, it will stop itself and clean up everything it was doing. Every Op added to the Ops-Q should have: - base execution logic, - error handling, and - program abort logic (e.g.: SIGINT) *  * So it should be able to try, retry, and cancel, abort and undo itself. For co-dependant multi-step Ops, and Ops-Batch can be created from multiple Ops, but each Op still needs all of their own logic. If a prerequisite Op fails in the Ops-Q fails, the other Ops that depend on it should be aborted. But in an Ops-Batch, a prerequisite Op can have a Fallback-Op in case it fails. A Fallback-Op should have the same output as the original Op, or have multiple Ops in a Fallback-Ops Set, or \"FlOps Set\", if it is functionally different. All Ops that depended on a failed Op will become an \"XOp\". *  *\n */\n\nconst defDesc = \"No Description\"\n/*\nconst defaultOutputErrMsg: Output[\"errorMsg\"] = `ERROR! Error type: Error\nName of the Operation that failed: \"${defDesc}\"\nError exit code: 1\nError output:  `\n*/\nconst defDbg = false\nconst defSh = false\nconst deflo = false\nconst defV = false\nconst defEnv = { useLoopback: deflo, useVerbose: defV, useShell: defSh, useDebug: defDbg, description: defDesc }\n/**\n * @description - An Op is a neat little wrapper function for error handling.\n * @param fn the function to wrap in the Op\n * @param input the array of arguments given to the function, each index is spread to the function's parameter:  `func(...input[])` .\n * @param environment\n * @returns {Promise<Output>}\n */\nexport const op: Op = async (\n  fn: Operation,\n  input: Input,\n  {\n    useLoopback = deflo,\n    useShell = defSh,\n    useDebug = defDbg,\n    description = defDesc,\n    useVerbose = false\n  }: EnvSettings = defEnv\n): Promise<Output> => {\n  // the return value:\n  const output: Output = {\n    exitCode: 1,\n    error: Error(),\n    errorMsg: \"\",\n    pipe: []\n  }\n\n  try {\n    // try to make verbose log output, fails silently:\n    try {\n      if (useVerbose) {\n        console.log(`Starting Operation: \"${description}\"`)\n        if (useDebug) console.log(\"\\t\", input, ...input)\n      }\n    } catch (silentError) {}\n\n    // try the function operation:\n    const result = await fn(...input)\n\n    // save the output to the pipe:\n    output.pipe = useLoopback ? result : [result]\n\n    // it did not error, so it was successful:\n    output.exitCode = 0\n\n    // try to make verbose log output, fails silently:\n    try {\n      if (useVerbose) {\n        console.log(`Finished Operation: \"${description}\"`)\n        if (useDebug) console.log(\"\\t\", result)\n      }\n    } catch (silentError) {}\n  } catch (e) {\n    /** @todo - figure out how to 000make more useful error codes. */\n    // non-zero means error:\n    output.exitCode = 1\n\n    // if a shell function failed, save the  `child_process`  Error exit code status:\n    if (useShell && typeof e === \"object\" && e !== null) {\n      if (\"status\" in e && typeof (e as { status: number }).status === \"number\") {\n        output.exitCode = (e as { status: number }).status // as statement used to satisfy TS.\n      } else if (\"code\" in e && typeof (e as { code: number }).code === \"number\") {\n        output.exitCode = (e as { code: number }).code // as statement used to satisfy TS.\n      }\n    }\n\n    // set Error object to thrown error:\n    if (e instanceof Error) output.error = e\n\n    // set err msg:\n    output.errorMsg = `ERROR! Error type: ${output.error.name}\nName of the Operation that failed: \"${description}\"\nError exit code: ${output.exitCode}\nError output: ${output.error}`\n\n    // output debug info:\n    if (useDebug) console.error(output.errorMsg)\n  }\n\n  return output\n}\n\n// function to save the settings of an Op to be called later:\nexport const opCurry: OpCurrier = (fn: Operation, env?: EnvSettings): OpCaller => {\n  return (input: Input): OpResult => {\n    return op(fn, input, env)\n  }\n}\n\n/**\n * @todo Sematic chaining with:\n *  -  .conduit()  to convert to another format the next Op uses.\n *  -  .parallel(...Ops[])  to execute multiple Ops simultaneously when they all make part of the input for the next Op.\n *  -  .abort()  to stop an OpsPipeline from continuing, (a clean exit after receiving a SIGINT).\n * @todo Add debuggers.\n * @todo Add compat for Ops with preset input.\n */\nexport class OpsPipeline /** @TODO <Input Type, Output Type> */ implements Pipeline<OpsPipeline> {\n  isMutable = true\n  private queue: OpsQueue = []\n  private fallbackOps: FlOpsQueue = new WeakMap()\n  private trace?: Trace\n  private isPipelineFlagSet: WeakSet<QueueableOpsPipeline> = new WeakSet()\n  private env: OpsQueueEnvSettings\n\n  constructor(description: string, env?: Omit<OpsQueueEnvSettings, \"description\">) {\n    // set the environment settings changed from the defaults.\n    // freeze the object to prevent it from being changed while the pipeline is running.\n    this.env = Object.freeze(\n      Object.assign(\n        {\n          useLoopback: false,\n          useShell: false,\n          useDebug: false,\n          useEmptyLoopback: true,\n          useNestingDebug: false,\n          description\n        },\n        env,\n        env &&\n          env.useNestingLog &&\n          !env.useLog /*is falsy*/ && {\n            useLog: env.useNestingLog // <- Here to prevent bug where nested logging isn't active because `useLog` isn't also true.\n          },\n        env &&\n          env.useNestingVerbose &&\n          !env.useVerbose /*is falsy*/ && {\n            useVerbose: env.useNestingVerbose // <- Here to prevent bug where nested verbose isn't logged because `useVerbose` isn't also true.\n          },\n        env &&\n          env.useNestingDebug &&\n          !env.useDebug /*is falsy*/ && {\n            useDebug: env.useNestingDebug // <- Here to prevent bug where nested debug isn't collected because `useDebug` isn't also true.\n          },\n        env &&\n          env.useNestingSilent &&\n          !env.useSilent /*is falsy*/ && {\n            useSilent: env.useNestingSilent // <- Here to prevent bug where nested silent still allows logging because `useSilent` isn't also true.\n          }\n      )\n    )\n\n    // conditional is used to not save unused debug info:\n    if (this.env.useDebug) {\n      // initialize the trace:\n      this.trace = {\n        pipelineInputs: [],\n        pipelineOutputs: [],\n        pipelineInstanceInfo: [],\n        enqueueChildDescriptions: [],\n        enqueueLocalEnvironments: [],\n        enqueueInstanceInfo: [],\n        globalEnvironment: this.env\n      }\n      // conditional is used to reduce unused debug info:\n      if (this.env.useNestingDebug) this.trace.nestedTraces = []\n    }\n  }\n\n  /**\n   * @summary used to submit an entire OpsPipeline as a more complicated Op to another OpsPipeline\n   * @example\n   * const OpPL = new OpsPipeline(env)\n   *  .pipe(fnDoStuff, \"stuff\")\n   *  .pipe(\n   *    new OpsPipeline(differentEnv)\n   *     .pipe(fnComplicatedStuff, \"do this...\")\n   *     .pipe(fnEvenMoreStuff, \"do that...\")\n   *     // you DON'T call  .start()  here, thats done by the containing pipeline,\n   *     // by using  .nest()  only INTERNALLY to make it a compatible format for the containing pipeline\n   *  )\n   */\n  private nest(\n    {\n      useNestingDebug = false,\n      useNestingVerbose = false,\n      useNestingLog = false,\n      useNestingSilent = false\n    }: OpsQueueEnvSettings = {\n      useNestingDebug: false,\n      useNestingVerbose: false,\n      useLog: false,\n      useNestingSilent: false\n    }\n  ): QueueableOpsPipeline {\n    // enable debug or verbose if nested settings are enabled:\n    this.env = Object.freeze({\n      ...this.env,\n      // use debug mode nesting:\n      useDebug: useNestingDebug || this.env.useDebug,\n      useNestingDebug: useNestingDebug || this.env.useNestingDebug,\n      // use verbose mode nesting:\n      useVerbose: useNestingVerbose || this.env.useVerbose,\n      useNestingVerbose: useNestingVerbose || this.env.useNestingVerbose,\n      // use logging mode nesting:\n      useLog: useNestingLog || this.env.useLog,\n      useNestingLog: useNestingLog || this.env.useNestingLog,\n      // use silent mode nesting:\n      useSilent: useNestingSilent || this.env.useSilent,\n      useNestingSilent: useNestingSilent || this.env.useNestingSilent\n    })\n    // prevent any more Ops from being added after the entire Pipeline is added to another Pipeline,\n    this.lock()\n    // and return callable version.\n    return async (input: Input) => {\n      return this.start(...input)\n    }\n  }\n\n  /**\n   * @summary returns a queueable version of a function or pipeline.\n   * - NOTE: also enables Tracing of Operation type, whether Op or Pipeline.\n   */\n  private formatOp(operation: Operation | OpsPipeline, env: EnvSettings): OpCaller | QueueableOpsPipeline | undefined {\n    // check if an OpsPipeline is being added to the OpsQueue:\n    if (operation instanceof OpsPipeline) {\n      // lock the pipeline and make it callable:\n      const queueOpsPl = operation.nest(this.env)\n\n      // used by the debugger:\n      this.isPipelineFlagSet.add(queueOpsPl)\n\n      return queueOpsPl\n    }\n    // otherwise, treat it as an Op:\n    else if (typeof operation === \"function\") {\n      // create Op and then add it to the queue:\n      // also add general env settings that weren't overridden by the more specific env.\n      return opCurry(operation, env)\n    }\n    // do nothing if it can't be used in the pipeline...\n  }\n\n  /**\n   * @description Set all of the Operations to do, along with their descriptions and their more specific environment settings.\n   *  It supports chaining.\n   *  - __NOTE__: There __*should*__ always be a useful description for an Operation.\n   * @example\n   * const OpPL = new OpsPipeline()\n   *  .pipe(fnDoStuff, \"stuff\")\n   *  .pipe(fnMoreStuff, \"more stuff\")\n   *  .pipe(fnFinalStuff, \"finishing stuff\", specialEnv)\n   *  .start()\n   * @example\n   * const OpPL = new OpsPipeline(env)\n   *  .pipe(fnDoStuff)\n   *  .start(initDataInput)\n   */\n  pipe(operation: Operation, description: string, envExtras?: Omit<EnvSettings, \"description\">): this\n  pipe(operation: OpsPipeline): this\n  pipe(operation: Operation | OpsPipeline, description?: string, envExtras?: Omit<EnvSettings, \"description\">): this {\n    if (!this.isMutable) throw Error(\"Attempted to add fallback Operation to a locked Pipeline.\") // return this\n\n    // is a function, and isn't a pipeline:\n    const isOp = typeof operation === \"function\"\n    // is a pipeline, and isn't a function:\n    const isPipeline = operation instanceof OpsPipeline\n\n    // Op's environment:\n    // and if the operation is a nested Pipeline, use the Pipeline's description.\n    const env: EnvSettings = {\n      ...this.env,\n      description: isPipeline ? operation.env.description : description,\n      ...envExtras\n    }\n\n    // add to the queue.\n    if (isPipeline || isOp) {\n      // check if an OpsPipeline is being added to the OpsQueue:\n      // otherwise, treat it as an Op:\n      // create Op and then add it to the queue:\n      // also add general env settings that weren't overridden by the more specific env.\n      const callableOpLike = this.formatOp(operation, env)\n\n      // enqueue it if its valid:\n      if (callableOpLike) this.queue.push(callableOpLike)\n    }\n\n    // prevent unused debug info from being created:\n    if (this.env.useDebug && this.trace && typeof this.trace === \"object\") {\n      // add some tracing info:\n      this.trace.enqueueChildDescriptions.push(description ?? (isPipeline ? operation.env.description ?? \"\" : \"\"))\n      this.trace.enqueueLocalEnvironments.push(env)\n      this.trace.enqueueInstanceInfo.push({\n        isOp,\n        isPipeline,\n        isFallback: false\n      } as TraceInstanceInfo)\n    }\n\n    // return is used for chaining:\n    return this\n  }\n\n  /**\n   * @description Set the fallback Operation(s) to use as a fail-safe, in case the initial Operation fails.\n   *  Can be another Operation or an entire Operation Pipeline.\n   *  - __NOTE__: The fallbacks will only work as a fail-safe if the RETURN VALUES are the SAME as the original Operation, or they return data that STILL USABLE by the NEXT Operation.\n   * @example\n   * const OpPL = new OpsPipeline()\n   *  .pipe(fnRiskyCouldFail, \"caution statement\")\n   *  .fallback(fnLessRiskyStuff, \"umm... well, this should work...\")\n   *  .start()\n   * @example\n   * const OpPL = new OpsPipeline(env)\n   *  .pipe(fnDangerousStuff, \"caution\")\n   *  .fallback(\n   *    new OpsPipeline(differentEnv)\n   *     .pipe(fnSaferStuff, \"do this instead...\")\n   *     .pipe(fnMoreSaferStuff, \"doing this also...\")\n   *     // you DON'T call  .start()  here, thats done by the containing pipeline.\n   *  )\n   *  .start(initDataInput)\n   * @example\n   * const OpPL = new OpsPipeline()\n   *  .pipe(fnRiskyCouldFail, \"caution statement\")\n   *  .fallback(fnLessRiskyStuff, \"umm... well, this should work...\")\n   *  .pipe(fnDangerousStuff, \"more caution\")\n   *  .fallback(\n   *    new OpsPipeline(differentEnv)\n   *     .pipe(fnSaferStuff, \"do this instead...\")\n   *     .pipe(fnMoreSaferStuff, \"doing this also...\")\n   *     .pipe(fnConvertToFormat, \"it DID work!\")\n   *     // you DON'T call  .start()  here, thats done by the containing pipeline.\n   *  )\n   *  .pipe(fnDoAnyways, \"just doing my thing...\")\n   *  .start(initDataInput)\n   * @fails If the pipeline has already been locked, it will throw an error.\n   * @fails fallback without preceding Op.\n   * - NOTE: There cannot __*EVER*__ be a fallback before any Ops were defined.\n   *  As it will not actually be called!\n   * @example\n   * // do NOT do this:\n   * const OpPL = new OpsPipeline(env) // there should ALWAYS be an Op before a fallback!\n   *  .fallback( // <- uh oh...\n   *    new OpsPipeline(differentEnv) // <- NOT executed\n   *     .pipe(fnSaferStuff, \"do this instead...\") // <- also NOT executed\n   *     .pipe(fnMoreSaferStuff, \"doing this also...\") // <- still NOT executed\n   *  )\n   *  .start(input) // <- THIS WILL NOT DO ANYTHING!\n   */\n  fallback(fallback: Operation, description: string, envExtras?: Omit<EnvSettings, \"description\">): this\n  fallback(fallback: OpsPipeline): this\n  fallback(\n    fallback: OpsPipeline | Operation,\n    description?: string,\n    envExtras?: Omit<EnvSettings, \"description\">\n  ): this {\n    if (!this.isMutable) throw Error(\"Attempted to add fallback Operation to a locked Pipeline.\") // return this\n    if (this.queue.length < 1) return this //  throw Error(`Attempted to add fallback Operation without a setting a preceding Operation in the Pipeline.`)\n\n    // is a function, and isn't a pipeline:\n    const isOp = typeof fallback === \"function\"\n    // is a pipeline, and isn't a function:\n    const isPipeline = fallback instanceof OpsPipeline\n\n    // Op's environment:\n    // and if the operation is a nested Pipeline, use the Pipeline's description.\n    const env: EnvSettings = {\n      ...this.env,\n      description: isPipeline ? fallback.env.description : description,\n      ...envExtras\n    }\n\n    // add to the FlOps queue.\n    if (isPipeline || isOp) {\n      // convert to valid Op-like:\n      // check if an FlOpsPipeline is being added to the FlOpsQueue.\n      // otherwise, treat it as an FlOp.\n      // create FlOp and then add it to the queue.\n      // also add general env settings that weren't overridden by the more specific env.\n      const enqueueable = this.formatOp(fallback, env)\n\n      // enqueue if valid:\n      if (enqueueable) {\n        // make a fallback for the last Op added to the pipeline's queue:\n        const targetForFailsafe = this.queue[this.queue.length - 1]\n\n        // the array of FlOps for the target Op:\n        const flOpsList: QueueableOpLike[] | undefined = this.fallbackOps.get(targetForFailsafe)\n\n        // it there is already an array, append to it:\n        if (flOpsList) {\n          // add FlOp to array of fallbacks for the target Op:\n          flOpsList.push(enqueueable)\n        }\n        // create an array to append to:\n        else {\n          // create an array of FlOps for the target Op:\n          // then add FlOp to array of fallbacks for the target Op,\n          // optional chaining is used to satisfy TypeScript, instead of using an \"as Type\" expression.\n          this.fallbackOps.set(targetForFailsafe, []).get(targetForFailsafe)?.push(enqueueable)\n        }\n      }\n    }\n\n    // prevent unused debug info from being created:\n    if (this.env.useDebug && this.trace && typeof this.trace === \"object\") {\n      // add some tracing info:\n      this.trace.enqueueChildDescriptions.push(description ?? (isPipeline ? fallback.env.description ?? \"\" : \"\"))\n      this.trace.enqueueLocalEnvironments.push(env)\n      this.trace.enqueueInstanceInfo.push({\n        isOp,\n        isPipeline,\n        isFallback: true\n      } as TraceInstanceInfo)\n    }\n\n    // return used for chaining:\n    return this\n  }\n\n  /**\n   * @summary Make the pipeline IMMUTABLE. Makes `.pipe` and `.fallback` undefined on the object itself, so it will not call the methods on the prototype chain. It also uses `Object.freeze()` to make the pipeline queues immutable.\n   * @returns the pipeline WITHOUT the `.pipe()` or `.fallback()` functions first in the prototype chain or a modifiable OpsQueue.\n   */\n  lock(): ImmutablePipeline {\n    // prevent any more Ops from being added to the pipeline:\n    // set the flag to false, which will prevent methods from adding to the pipeline:\n    this.isMutable = false\n\n    // and freeze the queues:\n    Object.freeze(this.queue)\n    Object.freeze(this.fallbackOps)\n\n    // // the methods that add to the pipeline queue are on the `.prototype` or `__proto__`,\n    // // so make properties directly on the object undefined to throw errors\n    // this.pipe = undefined\n    // this.fallback = undefined\n\n    // return the unmodifiable object, use for calling  .start()  later on:\n    return this as ImmutablePipeline\n  }\n\n  /**\n   * @summary Returns the debugging trace.\n   */\n  traceback(): ReturnType<TraceBack> | undefined {\n    return this.trace\n  }\n\n  /**\n   * @summary Takes an Array of arguments to give to the Operation being piped to in the Pipeline\n   */\n  async start(...input: Input): Promise<Output> {\n    // prevent any more Ops from being added to the pipeline\n    // by removing all Op adding functions from the pipeline,\n    // and preventing the OpsQueue and FlOpsQueue from being appended at either the Op adding methods's side, or the Array-like holders themselves.\n    this.lock()\n\n    // returns final output, or input for parent pipeline if this is a nested Op\n    const pipelineOutputValve: Output = {\n      exitCode: 1,\n      error: Error(), //Error(\"Not a real error: Default preset.\"),\n      errorMsg: \"\", //\"Operations Pipeline did change this default non-error message.\",\n      pipe: input\n    }\n\n    //  try..catch  is used for two reasons:\n    // 1): to use a  throw  statement to error out of loop after an Op reports unrecoverable failure an there's no fallback for it.\n    // 2): just in case the Op throws, even though Ops should not throw any errors as they have a  try..catch  for themselves.\n    try {\n      // verbose logs:\n      if (this.env.useVerbose) {\n        console.log(`Starting Pipeline: \"${this.env.description}\"`)\n        if (this.env.useDebug) console.log(\"\\t\", input)\n      }\n\n      // loop through every Op in the Queue, and put it in the Pipeline:\n      for (const nextOp of this.queue) {\n        // save output:\n        const output = await nextOp(input)\n\n        pipelineOutputValve.exitCode = output.exitCode\n\n        if (this.env.useDebug && this.trace instanceof Object) {\n          // save trace info for Op:\n          this.trace.pipelineOutputs.push(output)\n          this.trace.pipelineInputs.push(input)\n\n          // used to get TypeScript intellisense:\n          type dbTraceKey = keyof Output\n          // save nested debug trace:\n          if (this.env.useNestingDebug && (\"debugBackTrace\" as dbTraceKey) in output) {\n            // the  as Type  expression is used to satisfy TypeScript:\n            this.trace.nestedTraces?.push(output.debugBackTrace as Trace)\n          }\n        }\n\n        // exited successfully:\n        if (output.exitCode === 0) {\n          // save to pipe to use later:\n          input = output.pipe\n\n          if (this.env.useDebug && this.trace instanceof Object) {\n            // save trace for a successful Op:\n            const isPipeline = this.isPipelineFlagSet.has(nextOp)\n\n            this.trace.pipelineInstanceInfo.push({\n              isFallback: false,\n              isOp: !isPipeline,\n              isPipeline\n            } as TraceInstanceInfo)\n          }\n        }\n        // use FlOps, it there's an entry:\n        else if (this.fallbackOps.has(nextOp)) {\n          // counter for array index:\n          const flIndex = 0\n\n          // fallback Ops:\n          const flOpsQueue = this.fallbackOps.get(nextOp) as QueueableOpLike[]\n\n          // try each FlOp in the list of fallback Ops to try, to see if it is successful:\n          for (const nextFlOp of flOpsQueue) {\n            // save output from the next fallback to try to see if it succeeds:\n            const flOutput = await nextFlOp(input)\n\n            pipelineOutputValve.exitCode = flOutput.exitCode\n\n            if (this.env.useDebug && this.trace && typeof this.trace === \"object\") {\n              // save trace info for FlOp:\n              this.trace.pipelineInputs.push(input)\n              this.trace.pipelineOutputs.push(flOutput)\n            }\n\n            // use FlOp fallback if it exited successfully:\n            if (flOutput.exitCode === 0) {\n              if (this.env.useDebug && this.trace && typeof this.trace === \"object\") {\n                // save trace for a successful Op:\n                const isPipeline = this.isPipelineFlagSet.has(nextFlOp)\n                this.trace.pipelineInstanceInfo.push({\n                  isFallback: true,\n                  isOp: !isPipeline,\n                  isPipeline\n                } as TraceInstanceInfo)\n              }\n\n              // save to pipe to use later:\n              input = flOutput.pipe\n\n              // leave the fallback loop since the fallback worked, and return to the main Op loop:\n              break\n            }\n            // if NONE of the fallbacks were successful, error out on the last index:\n            else if (flIndex === flOpsQueue.length - 1) {\n              // give up on the fallback and entire queue, and error out:\n              pipelineOutputValve.errorMsg = flOutput.errorMsg\n              throw new Error(\n                \"ERROR: Operations Pipeline had an unrecoverable failure: The main Operation failed, and every fallback Operation for it also failed.\"\n              )\n            }\n          }\n        } else {\n          // give up on the queue, and error out:\n          pipelineOutputValve.errorMsg = output.errorMsg\n          throw new Error(\n            \"ERROR: Operations Pipeline had an unrecoverable failure: The main Operation failed, and there was no fallback Operation for it.\"\n          )\n        }\n      }\n      // nothing errored out:\n      // a value of 0 means no errors.\n      pipelineOutputValve.exitCode = 0\n      // pipelineOutputValve.errorMsg = `Not an real error: Successfully finished Operations Pipeline: \"${this.env.description}\" without any unmanageable errors.`\n    } catch (e) {\n      // set error:\n      if (e instanceof Error) pipelineOutputValve.error = e\n\n      // non-zero value means an error occurred\n      pipelineOutputValve.exitCode = 1\n\n      // set error message:\n      pipelineOutputValve.errorMsg = `ERROR! Error type: ${pipelineOutputValve.error.name}\nName of the Operation Pipeline that failed: \"${this.env.description}\"\nError exit code: ${pipelineOutputValve.exitCode}\nError output:  ${pipelineOutputValve.errorMsg}`\n\n      // log error message for CLI app, verbose mode, and debug mode:\n      if (!this.env.useSilent && (this.env.useLog || this.env.useShell || this.env.useDebug || this.env.useVerbose))\n        console.error(pipelineOutputValve.errorMsg)\n    } finally {\n      // verbose logs:\n      if (this.env.useVerbose) {\n        console.log(`Finished Pipeline: \"${this.env.description}\"`)\n        if (this.env.useDebug) console.log(\"\\t\", pipelineOutputValve.pipe)\n      }\n\n      // save debugging trace:\n      if (this.env.useDebug && this.trace && typeof this.trace === \"object\")\n        pipelineOutputValve.debugBackTrace = this.trace\n\n      // save final output:\n      pipelineOutputValve.pipe =\n        this.env.useEmptyLoopback && this.queue.length === 0 && input[0] instanceof Array ? input[0] : input\n    }\n\n    // return the finished output:\n    return pipelineOutputValve\n  }\n}\n", "/**\n * @fileoverview - User input sanitization types and functions.\n */\n\n/**\n * Necessary characters for the CLI and NPM's CLI:\n * @example \"\\w\" = \"[A-Za-z0-9_]\" = alpha-numeric and \"_\".\n * NPM uses: \"@\", \"/\", \".\", \"-\".\n * NPM SemVer uses: \"<\", \">\", \"(\", \")\", \"|\", \"~\", \"^\", \"+\", \"*\"\n * CLI uses: \"=\", \"?\", \" \" (space),\n */\nexport const unsafeCLICharsRegex = /[^\\w@/.<>()|~^+*=? -]/gi\n\n// this sanitizes an arg for NPM:\nexport const argSanitize = (rawArg: string): string => {\n  // just remove bad chars by replacing with empty string:\n  // return sanitized string to string arg array:\n  return rawArg.replace(unsafeCLICharsRegex, \"\")\n}\n\n// this sanitizes an array of string args for NPM:\nexport const argvSanitize = (rawArgv: string[]): string[] => {\n  // return empty array, since they're falsy just like null and undefined:\n  if (!rawArgv) return rawArgv\n\n  // create a sanitized array of the string array:\n  // for each string arg, return a sanitized string.\n  const sanArgv: string[] = rawArgv.map(argSanitize)\n\n  // return sanitized arg array:\n  return sanArgv\n}\n", "import * as Readline from \"readline\"\nimport { stdin, stdout } from \"process\"\nimport { execFile as execFileCallback } from \"child_process\"\nimport { promisify } from \"util\"\n\n/**\n * @debrief - This is a module for all custom or modified utilities used in the program.\n */\n\n/**\n * @todo - I don't know how to get this class to not throw typing errors in TS...\n */\nclass AsyncInterface extends Readline.Interface {\n  // constructor(input: NodeJS.ReadableStream, output?: NodeJS.WritableStream, completer?: Readline.Completer | Readline.AsyncCompleter, terminal?: boolean){\n  constructor(options: Readline.ReadLineOptions) {\n    // super(input, output, completer, terminal)\n    super(options)\n  }\n\n  // override non-async method:\n  question(query: string): Promise<string> {\n    // return created promise for awaiting user responce asynchronously:\n    return new Promise((resolve: Function) => {\n      // use normal readline.question() method:\n      super.question(query, (responce: string) => {\n        // resolve promise with user input to return from promise:\n        resolve(responce)\n      })\n    })\n  }\n}\n\n/**\n * @debrief - This is for the user interaction, getting input, responces, etc.\n * in an Promise and async/await compatible way.\n */\n\n// function createAsyncInterface(options: Readline.ReadLineOptions): Readline.Interface;\n// function createAsyncInterface(input: NodeJS.ReadableStream, output?: NodeJS.WritableStream, completer?: Readline.Completer | Readline.AsyncCompleter, terminal?: boolean): Readline.Interface;\n// function createAsyncInterface(input: NodeJS.ReadableStream, output?: NodeJS.WritableStream, completer?: Readline.Completer | Readline.AsyncCompleter, terminal?: boolean) {\nconst createAsyncInterface = (options: Readline.ReadLineOptions): Readline.Interface => {\n  const AsyncReadlineInterface = Readline.createInterface(options)\n\n  // async/await compatible readline.question() function:\n  // this returns the user's responce string.\n  AsyncReadlineInterface.question = (query: string): Promise<string> => {\n    // return created promise for awaiting user responce asynchronously:\n    return new Promise((resolve: Function) => {\n      // use normal readline.question() method:\n      AsyncReadlineInterface.question(query, (responce: string) => {\n        // resolve promise with user input to return from promise:\n        resolve(responce)\n      })\n    })\n  }\n\n  return AsyncReadlineInterface\n}\n\nconst rl = <AsyncInterface>createAsyncInterface({\n  input: stdin,\n  output: stdout\n})\n\n/**\n * @debrief - async generator for a for await...of loop to replace an Array forEach.\n */\nconst asyncForEach = async (array: Array<unknown>, asyncCallback: Function, thisArg?: object | undefined) => {\n  // catch any promise errors:\n  try {\n    let index = 0\n\n    for (const value of array) {\n      await asyncCallback.call(thisArg, value, index++, array)\n    }\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nexport { rl as AsyncReadline, asyncForEach }\n\nconst asyncExecFile = promisify(execFileCallback)\nexport { asyncExecFile as execfile }\n\nexport const utilPromise = {\n  execFile: asyncExecFile\n}\n\n// the value returned from util.execFile():\nexport type ExecFileResult = {\n  stdout: string\n  stderr: string\n}\n// the value returned from the promisified util.execFile():\nexport type ExecFileAsyncResult = Promise<ExecFileResult>\n", "import { Dir, PathLike } from \"fs\"\nimport type { EncodingOption } from \"fs\"\nimport { tmpdir } from \"os\"\nimport {\n  mkdtemp,\n  mkdir,\n  readFile,\n  writeFile,\n  opendir,\n  rm /* rename, open, rmdir, stat, FileHandle */\n} from \"fs/promises\"\nimport { move } from \"fs-extra\"\nimport { /* PlatformPath, */ posix as path } from \"path\"\nexport { chdir, cwd } from \"process\"\nconst { basename, join } = path\n\n/**\n * @debrief - This module is a namespace for all of the file handling functions, classes,\n *  and TS interfaces, types and enums. It uses the FSPromise API version.\n *\n * // This module facilitates this for file access.\n * // From NPM Docs:\n * In cases where you need to preserve npm packages locally or have them available through a single file download, you can bundle the packages in a tarball file by specifying the package names in the bundledDependencies array and executing `npm pack`.\n *\n * // Compatibility note:\n * If this is spelled \"bundleDependencies\", then that is also honored.\n *\n * // MVP - Minimum Viable Product:\n * @goal1 - read NPM pkg file: \"package.json\".\n * @goal2 - read package.json fields: \"dependencies\", \"devDependencies\", \"peerDependencies\", \"optionalDependencies\", and \"bundle(d)Dependencies\".\n * @goal3 - write to package.json field: \"bundle(d)Dependencies\".\n * @goal4 - make tmp dir for install npm pkgs.\n * @goal5 - move pkg dirs from tmp dir to install dir.\n * @goal6 - delete tmp install dir after pkg dir move.\n *\n * @todo:\n * // @goalX - Digest file, it lists every pkg backed up and lists every variety of dependency installed.\n * // @goalX - SHA2/SHA3 checksums file, to ensure integrity of pkg backup files.\n */\n\n/**\n * @TODO\n */\n// type NumChar = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n// type NumStr = `${NumChar}`\n// type VerStr = `${NumStr}.${NumStr}.${NumStr}`\n// type SemVer = `^${VerStr}` | `~${VerStr}`\n// interface NPMPackageToSemVer {}\nexport interface NPMPackageJSON {\n  version: string // SemVer\n  dependencies: string[]\n  devDependencies: string[]\n  peerDependencies: string[]\n  optionalDependencies: string[]\n  bundleDependencies?: string[]\n  bundledDependencies?: string[]\n}\n\nexport type FSPath = PathLike & string\nexport const PackageJSON = \"package.json\"\nexport const PackageJSONEncodingFormat: string & BufferEncoding = \"utf8\"\n\n// read the package.json on the pkg dir:\nexport const readPkgJSON = async (containingDirPath: FSPath): Promise<NPMPackageJSON> => {\n  // create the path to the package.json:\n  const path = join(containingDirPath, PackageJSON)\n\n  // read the package.json:\n  const file = await readFile(path, PackageJSONEncodingFormat)\n\n  // make the JSON text file an object:\n  return JSON.parse(file)\n}\n\n// write an object to the JSON text package.json file:\nexport const writePkgJSON = async (containingDirPath: FSPath, newPkgJSON: NPMPackageJSON, signal?: AbortSignal) => {\n  // create the path to the package.json:\n  const path = join(containingDirPath, PackageJSON)\n\n  // convert the JSON object into JSON text:\n  const file = JSON.stringify(newPkgJSON, undefined, 2)\n\n  // write JSON text to the package.json:\n  return await writeFile(path, file, {\n    encoding: PackageJSONEncodingFormat,\n    signal\n  } as EncodingOption)\n}\n\nexport const makeTmpDir = async (prefix: FSPath = \"tmp-install-dir-\"): Promise<FSPath> =>\n  await mkdtemp(join(tmpdir(), prefix))\n\nexport const moveToDir = async (file: FSPath, dest: FSPath) => await move(file, join(dest, basename(file)))\n\nexport const makeDir = async (dirName: FSPath): Promise<Dir> => {\n  await mkdir(dirName, 0o755)\n  return await opendir(dirName, { encoding: PackageJSONEncodingFormat })\n}\n\nexport const removeDir = async (dirName: FSPath) => await rm(dirName, { recursive: true })\n\nexport const removePath = async (dirName: FSPath) => await rm(dirName, { recursive: true })\n", "import { Command, createCommand, Option } from \"commander\"\nimport { argvSanitize } from \"./arg-parse-utils\"\nimport { OpsPipeline } from \"./op-queue-pipeline\"\nexport { Command } from \"commander\"\n\n/**\n * @fileoverview - Read the CLI input to get commands, arguments, and options.\n */\n\n/** */\nconst verboseHandler = (_: unknown, previousVerbosityLevel: number) => {\n  return Number(previousVerbosityLevel) + 1\n}\nconst dbgHandler = (_: unknown, previousDebugLevel: number) => {\n  return Number(previousDebugLevel) + 1\n}\n/**\n *\n */\nexport const commander = createCommand(\"npm-super-pack\")\n  .version(\"0.1.0\")\n  .description(\"A program to install NPM packages offline.\")\n  .combineFlagAndOptionalValue(false) // disable non-standard/uncommon option formats that cause unwanted conflicts with other options\n  //  .exitOverride() // disable Commander directly aborting Node.js process by exit on error itself\n  .usage(\"[options] package [packages...]\")\n  .usage(\"[options] package [packages...] [--dest|--save [path]]\")\n  // .usage(\"[options] path [path...]\") /** @TODO */\n  .argument(\"<package>\", \"The NPM package to install, is also used for installing offline packages.\")\n  //  .argument(\"[path]\", \"The file location the NPM package will be downloaded to.\") /** @TODO */\n  /* .addOption(\n  new Option(\"--production=[boolean], --production\", \"If true, save only the production dependencies of the package(s)\")\n   .choices([\"true\", \"false\"])\n   .default(\"true\")\n ) */\n  .option(\"--production=[boolean], --production\", \"If true, save only the production dependencies of the package(s)\")\n  .addOption(\n    new Option(\n      \"-P, --save-prod, --production=true, --production\",\n      \"Save the production dependencies of the package(s).\"\n    )\n  )\n  .addOption(\n    new Option(\n      \"-B, --save-bundle\",\n      \"Save the bundled dependencies of the package(s), this is the normal behavior of npm pack.\"\n    )\n  )\n  .addOption(\n    new Option(\n      \"-D, --save-dev, --production=false\",\n      \"Save both the production and dev dependencies of the package(s).\"\n    ).implies({ saveProd: true })\n  )\n  .addOption(\n    new Option(\"-O, --save-optional\", \"Save the production, dev, and optional dependencies of the package(s).\").implies(\n      { saveProd: true, saveDev: true }\n    )\n  )\n  .addOption(new Option(\"--save-peer\", \"Save the peer dependencies of the package(s).\").implies({ saveProd: true }))\n  .addOption(\n    new Option(\n      \"--save <path>\",\n      \"Install package to file system location, also saves package to NPM's internal cache (_cacache).\"\n    ).conflicts(\"noSave\")\n  )\n  .addOption(\n    new Option(\n      \"--dest <path>\",\n      \"Install package to file system location, also saves package to NPM's internal cache (_cacache).\"\n    ).conflicts(\"noSave\")\n  )\n  .addOption(\n    new Option(\n      \"--pack-destination <path>\",\n      \"Install package to file system location, also saves package to NPM's internal cache (_cacache).\"\n    ).conflicts(\"noSave\")\n  )\n  .addOption(\n    new Option(\n      \"--package-destination <path>\",\n      \"Install package to file system location, also saves package to NPM's internal cache (_cacache).\"\n    ).conflicts(\"noSave\")\n  )\n  .addOption(\n    new Option(\n      \"--no-save\",\n      'Does not install package, only saves package to NPM\\'s internal cache (\"_cacache\").'\n    ).conflicts(\"save\")\n  )\n  .option(\n    \"-E, --save-exact\",\n    \"Saved dependencies will be configured with an exact version rather than using NPM's default semver range operator.\"\n  )\n  .option(\"-n, --dry-run\", \"Do not actually do anything, just print what would be done.\")\n  .option(\"-f, --force\", \"Override any warnings.\")\n  .option(\"-v, --verbose\", \"Print extra information.\", verboseHandler, 0)\n  .addOption(\n    new Option(\"--debug\", \"Print debug information, use repeatedly to print more information.\")\n      .implies({ verbose: true })\n      .argParser(dbgHandler)\n      .default(0)\n      .preset(0)\n  )\n  .option(\n    \"--legacy-bundling\",\n    \"Eliminates all automatic deduping and causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package.\"\n  )\n  .addOption(\n    new Option(\n      \"--omit <dependency types...>\",\n      '\"prod\", \"dev\", \"optional\", \"bundle\", or \"peer\" (can be set multiple times). Dependency types to omit from the installation. If a package type appears in both the --include and --omit lists, then it will be included.'\n    ).choices([\"prod\", \"production\", \"dev\", \"optional\", \"bundle\", \"bundled\", \"peer\"])\n  )\n  .addOption(\n    new Option(\n      \"--include <dependency types...>\",\n      '\"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times). Allows for defining which types of dependencies to install. This is the inverse of --omit=<type>. Dependency types specified in --include will not be omitted, regardless of the order in which omit/include are specified on the command-line.'\n    ).choices([\"prod\", \"dev\", \"optional\", \"peer\"])\n  )\n  .addOption(\n    new Option(\n      \"--strict-peer-deps\",\n      \"If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure.\"\n    ).conflicts(\"legacyPeerDeps\")\n  )\n  .addOption(\n    new Option(\n      \"--legacy-peer-deps\",\n      \"Causes npm to completely ignore peerDependencies, as in npm versions 3 through 6. If a package cannot be installed because of overly strict peerDependencies that collide, it provides a way to move forward resolving the situation. Use of legacy-peer-deps is not recommended, as it will not enforce the peerDependencies contract that meta-dependencies may rely on.\"\n    ).conflicts(\"strictPeerDeps\")\n  )\n  .option(\n    \"--ignore-scripts\",\n    \"Eliminates all automatic deduping and causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package.\"\n  )\n  .option(\n    \"-y, --yes, --no-interactive, --auto, --automated\",\n    \"Assumes yes to all questions, and don't ask for user input.\"\n  )\n  .option(\"-i, --interactive\", \"Show pretty menus to view, select, confirm, or change packages.\")\n  .option(\"--tag <tag>\", 'Install a package without giving a specific version, install the specified tag. ex: \"latest\"')\n  .option(\n    \"--proxy [url]\",\n    \"A proxy to use for outgoing http requests. If the NPM HTTP_PROXY or http_proxy environment variables are set, proxy settings will be honored by NPM's underlying request library.\"\n  )\n  .option(\n    \"--https-proxy [url]\",\n    \"A proxy to use for outgoing https requests. If the NPM HTTPS_PROXY or https_proxy or HTTP_PROXY or http_proxy environment variables are set, proxy settings will be honored by the underlying make-fetch-happen library.\"\n  )\n  .option(\n    \"--no-proxy <domain extentions...>, --noproxy <domain extentions...>\",\n    \"Domain extensions that should bypass any proxies, (can be set multiple times). Also accepts a comma-delimited string. The default value is the NPM NO_PROXY environment variable.\"\n  )\n  /* .addOption(\n  new Option(\"--progress=[boolean], --progress\", \"Display download and install progress reports. Default true.\")\n   .choices([\"true\", \"false\"])\n   .default(\"true\")\n ) */\n  .option(\"--progress=[boolean], --progress\", \"Display download and install progress reports. Default true.\")\n  /* .addOption(\n  new Option(\"--ignore-scripts <boolean>\", \"If true, npm does not run scripts specified in package.json files. Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre-scripts or post-scripts. Default false.\")\n   .choices([\"true\", \"false\"])\n   .default(\"false\")\n ) */\n  .option(\n    \"--ignore-scripts <boolean>\",\n    \"If true, npm does not run scripts specified in package.json files. Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre-scripts or post-scripts. Default false.\"\n  )\n  .option(\"--no-progress\", \"Eliminates all progress reporting.\")\n  .option(\n    \"--prefer-online\",\n    \"If true, NPM staleness checks for cached data will be forced, always looking for fresh package data.\"\n  )\n  .option(\n    \"--prefer-offline\",\n    \"If true, NPM staleness checks for cached data will be bypassed, but missing data will be requested from the server. To force full offline mode, use --offline.\"\n  )\n  .option(\n    \"--offline\",\n    \"If true, NPM packages will be not be downloaded, but be sourced from the previously installed backups or NPM's cache.\"\n  )\n  .option(\n    \"--package <packages...>, --packages <packages...>\",\n    \"Clearly define the names of the package(s) to be installed.\"\n  )\n  .option(\"--node-version\", 'The nodeJS version to use when checking a package\\'s \"engines\" setting.')\n  .option(\n    \"--max-sockets <number>, --maxsockets <number>\",\n    \"The maximum number of connections to use per origin (protocol/host/port combination).\"\n  )\n  .option(\n    \"--foreground-scripts\",\n    \"Run all NPM build scripts (preinstall, install, and postinstall) for installed packages in the foreground process, sharing standard input, output, and error with the main NPM process. Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.\"\n  )\n  /* .addOption(\n  new Option(\"--loglevel <level>, --log-level <level>, --npm-log-level <level>\",\"\")\n   .choices([\"silent\", \"error\", \"warn\", \"notice\", \"http\", \"timing\", \"info\", \"verbose\", \"silly\"])\n   .default(\"notice\")\n ) */\n  .addOption(\n    new Option(\n      \"--loglevel <level>, --log-level <level>, --npm-log-level <level>\",\n      \"The logging detail NPM uses.\"\n    ).choices([\"silent\", \"error\", \"warn\", \"notice\", \"http\", \"timing\", \"info\", \"verbose\", \"silly\"])\n  )\n\n/**\n *\n */\nexport const argParserQ = new OpsPipeline(\"Argument Parser\" /* , { useDebug: true, useVerbose: false } */)\n  .pipe(({ argv, parser }: { argv: string[]; parser: Command }) => {\n    // use only the user input, not the node path or executable name:\n    if (argv === process.argv) argv = argv.slice(2)\n\n    return {\n      argv,\n      parser\n    }\n  }, \"Prepare ArgV\")\n  .pipe(({ argv, parser }: { argv: string[]; parser: Command }) => {\n    return {\n      args: argvSanitize(argv),\n      parser\n    }\n  }, \"Input Sanitization\")\n  .pipe(({ args, parser }: { args: string[]; parser: Command }) => {\n    return parser.parse(args, { from: \"user\" })\n  }, \"Parsing Commands, Arguments, And Options\")\n\n/**\n *\n */\nexport const argParser = (argv: string[] = process.argv, parser: Command = commander, Q: OpsPipeline = argParserQ) => {\n  // use only the sanitized options and parse the options and arguments:\n  return Q.start({ argv, parser })\n}\n\n/**\n *\n */\nexport const command = async (argv: string[] = process.argv.slice(2)): Promise<Command> => {\n  return (await argParser(argv, commander)).pipe[0] as Command\n}\n\n/**\n *\n */\nexport const options = command()\n\n/*\nNPM package.json: (excerpt)\n\nname\n\nIf you plan to publish your package, the most important things in your package.json are the name and version fields as they will be required. The name and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version. If you don't plan to publish your package, the name and version fields are optional.\n\nThe name is what your thing is called.\n\nSome rules:\n\n    The name must be less than or equal to 214 characters. This includes the scope for scoped packages.\n    The names of scoped packages can begin with a dot or an underscore. This is not permitted without a scope.\n    New packages must not have uppercase letters in the name.\n    The name ends up being part of a URL, an argument on the command line, and a folder name. Therefore, the name can't contain any non-URL-safe characters.\n\nSome tips:\n\n    Don't use the same name as a core Node module.\n    Don't put \"js\" or \"node\" in the name. It's assumed that it's js, since you're writing a package.json file, and you can specify the engine using the \"engines\" field. (See below.)\n    The name will probably be passed as an argument to require(), so it should be something short, but also reasonably descriptive.\n    You may want to check the npm registry to see if there's something by that name already, before you get too attached to it. https://www.npmjs.com/\n\nA name can be optionally prefixed by a scope, e.g. @myorg/mypackage. See scope for more detail.\n */\n/*\nNPM install options:\n\n  \u2022 -P, --save-prod: Package will appear in your dependencies. This is the default unless -D or -O are present.\n\n  \u2022 -D, --save-dev: Package will appear in your devDependencies.\n\n  \u2022 -O, --save-optional: Package will appear in your optionalDependencies.\n\n  \u2022 --no-save: Prevents saving to dependencies.  When using any of the above options to save dependencies to your  package.json, there are two additional, optional flags:\n\n  \u2022 -E, --save-exact: Saved dependencies will be configured with an exact version rather than using npm's default semver range operator.\n\n  \u2022 -B, --save-bundle: Saved dependencies will also be added to your bundleDependencies list.  Further, if you  have  an npm-shrinkwrap.json  or package-lock.json then it will be updated as well.  <scope> is optional. The package will be downloaded from the registry associated with the specified scope. If no registry is associated with the given  scope the  default  registry is assumed. See npm help scope.  Note: if you do not include the @-symbol on your scope name, npm will interpret this as a GitHub repository instead, see below. Scopes names must also be followed  by  a  slash.\n\n  The --tag argument will apply to all of the specified install targets. If a tag with the given name exists, the  tagged  version is preferred over newer versions.\n\n  The --dry-run argument will report in the usual way what the install would have done without actually installing anything.\n\n  The --package-lock-only argument will only update the package-lock.json, instead of checking node_modules and downloading dependencies.\n\n  The -f or --force argument will force npm to fetch remote resources even if a local copy exists on disk.\n\n  With the --production flag (or when the NODE_ENV environment variable is set to production), npm will not install modules listed in devDependencies. To install all modules listed in both dependencies and devDependencies when NODE_ENV environment variable is set to production, you can use --production=false.\n\n    NOTE: The --production flag has no particular meaning when adding a dependency to a project.\n */\n/*\nNPM configuration options:\n\n  See the npm help config help doc. Many of the configuration params have some effect on installation, since that's most of what npm does.\n\n  These are some of the most common options related to installation.\n\n  save\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      Save installed packages to a package.json file as dependencies.\n\n      When used with the npm rm command, removes the dependency from package.json.\n\n  save-exact\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Dependencies saved to package.json will be configured with an exact version rather than using npm's default semver range operator.\n\n  global\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Operates  in  \"global\"  mode, so that packages are installed into the prefix folder instead of the current working directory.\n      See npm help folders for more on the differences in behavior.\n\n      \u2022 packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.\n\n      \u2022 bin files are linked to {prefix}/bin\n\n      \u2022 man pages are linked to {prefix}/share/man\n\n  global-style\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Causes npm to install the package into your local node_modules folder with the same layout it uses with the global  node_modules folder. Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their node_modules folders. This obviously will eliminate some deduping. If used with legacy-bundling, legacy-bundling will be preferred.\n\n  legacy-bundling\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package. This eliminates all automatic deduping. If used with global-style this option will be preferred.\n\n  strict-peer-deps\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install  failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.\n\n      By  default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.\n\n      When  such  and  override  is  performed,  a  warning  is  printed,  explaining  the  conflict  and the packages involved. If --strict-peer-deps is set, then this warning is treated as a failure.\n\n  package-lock\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      If set to false, then ignore package-lock.json files when installing. This will also  prevent  writing  package-lock.json  if\n      save is true.\n\n      When  package package-locks are disabled, automatic pruning of extraneous modules will also be disabled. To remove extraneous modules with package-locks disabled use npm prune.\n\n  omit\n      \u2022 Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.\n\n      \u2022 Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\n      Dependency types to omit from the installation tree on disk.\n\n      Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not physically installed on disk.\n\n      If a package type appears in both the --include and --omit lists, then it will be included.\n\n      If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.\n\n  ignore-scripts\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If true, npm does not run scripts specified in package.json files.\n\n      Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart,  npm  test,  and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.\n\n  audit\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      When  \"true\" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for npm help audit for details on what is submitted.\n\n  bin-links\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      Tells npm to create symlinks (or .cmd shims on Windows) for package executables.\n\n      Set to false to have it not do this. This can be used to work around the fact that some file systems don't support  symlinks, even on ostensibly Unix systems.\n\n  fund\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      When \"true\" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding.\n      See npm help npm fund for details.\n\n  dry-run\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Indicates that you don't want npm to make any changes and that it should only report what it would have  done.  This  can  be passed  into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.\n\n      Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.\n\n  workspace\n      \u2022 Default:\n\n      \u2022 Type: String (can be set multiple times)\n\n      Enable running a command in the context of the configured workspaces of the current project while filtering by  running  only the workspaces defined by this configuration option.\n\n      Valid values for the workspace config are either:\n\n      \u2022 Workspace names\n\n      \u2022 Path to a workspace directory\n\n      \u2022 Path to a parent workspace directory (will result to selecting all of the nested workspaces)\n\n      When  set  for  the  npm  init  command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\n      This value is not exported to the environment for child processes.\n\n  workspaces\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Enable running a command in the context of all the configured workspaces.\n\n      This value is not exported to the environment for child processes.\n */\n/*\nNPM pack configuration options:\n\n  dry-run\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Indicates  that  you  don't  want npm to make any changes and that it should only report what it would have done. This can be\n      passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as  pack\n      and publish.\n\n      Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.\n\n  json\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Whether or not to output JSON data, rather than the normal output.\n\n      \u2022 In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.\n\n      Not supported by all npm commands.\n\n  pack-destination\n      \u2022 Default: \".\"\n\n      \u2022 Type: String\n\n      Directory in which npm pack will save tarballs.\n\n  workspace\n      \u2022 Default:\n\n      \u2022 Type: String (can be set multiple times)\n\n      Enable  running  a command in the context of the configured workspaces of the current project while filtering by running only\n      the workspaces defined by this configuration option.\n\n      Valid values for the workspace config are either:\n\n      \u2022 Workspace names\n\n      \u2022 Path to a workspace directory\n\n      \u2022 Path to a parent workspace directory (will result to selecting all of the nested workspaces)\n\n      When set for the npm init command, this may be set to the folder of a workspace which does  not  yet  exist,  to  create  the\n      folder and set it up as a brand new workspace within the project.\n\n      This value is not exported to the environment for child processes.\n\n  workspaces\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Enable running a command in the context of all the configured workspaces.\n\n      This value is not exported to the environment for child processes.  <!-- AUTOGENERATED CONFIG DESCRIPTIONS END -->\n\n  Description\n      For  anything  that's installable (that is, a package folder, tarball, tarball url, git url, name@tag, name@version, name, or\n      scoped name), this command will fetch it to the cache, copy the tarball to the  current  working  directory  as  <name>-<version>.tgz, and then write the filenames out to stdout.\n\n      If the same package is specified multiple times, then the file will be overwritten the second time.\n\n      If no arguments are supplied, then npm packs the current package folder.\n */\n/*\nCONFIG(7)                                                                                                                  CONFIG(7)\n\nNAME\n      config - More than you probably want to know about npm configuration\n\n  Description\n      npm gets its configuration values from the following sources, sorted by priority:\n\n  Command Line Flags\n      Putting  --foo  bar on the command line sets the foo configuration parameter to \"bar\".  A -- argument tells the cli parser to\n      stop reading flags.  Using --flag without specifying any value will set the value to true.\n\n      Example: --flag1 --flag2 will set both configuration parameters to true, while --flag1 --flag2 bar will set  flag1  to  true,\n      and  flag2 to bar.  Finally, --flag1 --flag2 -- bar will set both configuration parameters to true, and the bar is taken as a\n      command argument.\n\n  Environment Variables\n      Any environment variables that start with npm_config_ will be interpreted as a configuration parameter.  For example, putting\n      npm_config_foo=bar  in your environment will set the foo configuration parameter to bar.  Any environment configurations that\n      are not given a value will be given the value of true.  Config values are case-insensitive, so NPM_CONFIG_FOO=bar  will  work\n      the  same.  However, please note that inside npm help scripts npm will set its own environment variables and Node will prefer\n      those  lowercase versions over any uppercase ones that you might set. For details see this issue\n      https://github.com/npm/npm/issues/14528.\n\n      Notice  that  you  need to use underscores instead of dashes, so --allow-same-version would become npm_config_allow_same_version=true.\n\n  npmrc Files\n      The four relevant files are:\n\n      \u2022 per-project configuration file (/path/to/my/project/.npmrc)\n\n      \u2022 per-user configuration file (defaults to $HOME/.npmrc; configurable via CLI option  --userconfig  or  environment  variable\n        $NPM_CONFIG_USERCONFIG)\n\n      \u2022 global  configuration  file (defaults to $PREFIX/etc/npmrc; configurable via CLI option --globalconfig or environment variable $NPM_CONFIG_GLOBALCONFIG)\n\n      \u2022 npm's built-in configuration file (/path/to/npm/npmrc)\n\n      See npm help npmrc for more details.\n\n  Default Configs\n      Run npm config ls -l to see a set of configuration parameters that are internal to npm, and are defaults if nothing  else  is\n      specified.\n\n  Shorthands and Other CLI Niceties\n      The  following  shorthands  are parsed on the command-line:\n\n      \u2022 -a: --all\n\n      \u2022 --enjoy-by: --before\n\n      \u2022 -c: --call\n\n      \u2022 --desc: --description\n\n      \u2022 -f: --force\n\n      \u2022 -g: --global\n\n      \u2022 -L: --location\n\n      \u2022 -d: --loglevel info\n\n      \u2022 -s: --loglevel silent\n\n      \u2022 --silent: --loglevel silent\n\n      \u2022 --ddd: --loglevel silly\n\n      \u2022 --dd: --loglevel verbose\n\n      \u2022 --verbose: --loglevel verbose\n\n      \u2022 -q: --loglevel warn\n\n      \u2022 --quiet: --loglevel warn\n\n      \u2022 -l: --long\n\n      \u2022 -m: --message\n\n      \u2022 --local: --no-global\n\n      \u2022 -n: --no-yes\n\n      \u2022 --no: --no-yes\n\n      \u2022 -p: --parseable\n\n      \u2022 --porcelain: --parseable\n\n      \u2022 -C: --prefix\n\n      \u2022 --readonly: --read-only\n\n      \u2022 --reg: --registry\n\n      \u2022 -S: --save\n\n      \u2022 -B: --save-bundle\n\n      \u2022 -D: --save-dev\n\n      \u2022 -E: --save-exact\n\n      \u2022 -O: --save-optional\n\n      \u2022 -P: --save-prod\n\n      \u2022 -?: --usage\n\n      \u2022 -h: --usage\n\n      \u2022 -H: --usage\n\n      \u2022 --help: --usage\n\n      \u2022 -v: --version\n\n      \u2022 -w: --workspace\n\n      \u2022 --ws: --workspaces\n\n      \u2022 -y: --yes\n\n      If the specified configuration param resolves unambiguously to a known configuration parameter, then it is expanded  to  that\n      configuration parameter.  For example:\n\n        npm ls --par\n        # same as:\n        npm ls --parseable\n\n      If  multiple  single-character  shorthands are strung together, and the resulting combination is unambiguously not some other\n      configuration param, then it is expanded to its various component pieces.  For example:\n\n        npm ls -g -p -l -d\n        # same as:\n        npm ls --global --parseable --long --loglevel info\n\n  Config Settings\n\n  _auth\n      \u2022 Default: null\n\n      \u2022 Type: null or String\n\n      A basic-auth string to use when authenticating against the npm registry.\n\n      Warning: This should generally not be set via a command-line option. It is safer to use  a  registry-provided  authentication\n      bearer token stored in the ~/.npmrc file by running npm login.\n\n  access\n      \u2022 Default: 'restricted' for scoped packages, 'public' for unscoped packages\n\n      \u2022 Type: null, \"restricted\", or \"public\"\n\n      When  publishing  scoped  packages,  the access level defaults to restricted.  If you want your scoped package to be publicly\n      viewable (and installable) set --access=public. The only valid values for access are public and restricted. Unscoped packages\n      always have an access level of public.\n\n  all\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      When  running npm outdated and npm ls, setting --all will show all outdated or installed packages, rather than only those directly depended upon by the current project.\n\n  allow-same-version\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Prevents throwing an error when npm version is used to set the new version to the same value as the current version.\n\n  audit\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      When \"true\" submit audit reports alongside the current npm command to the default registry and all registries configured  for\n      scopes. See the documentation for npm help audit for details on what is submitted.\n\n  audit-level\n      \u2022 Default: null\n\n      \u2022 Type: null, \"info\", \"low\", \"moderate\", \"high\", \"critical\", or \"none\"\n\n      The minimum level of vulnerability for npm audit to exit with a non-zero exit code.\n\n  before\n      \u2022 Default: null\n\n      \u2022 Type: null or Date\n\n      If  passed  to  npm  install, will rebuild the npm tree such that only versions that were available on or before the --before\n      time get installed. If there's no versions available for the current set of direct dependencies, the command will error.\n\n      If the requested version is a dist-tag and the given tag does not pass the --before filter, the most recent version less than\n      or equal to that tag will be used. For example, foo@latest might install foo@1.2 even though latest is 2.0.\n\n  bin-links\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      Tells npm to create symlinks (or .cmd shims on Windows) for package executables.\n\n      Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks,\n      even on ostensibly Unix systems.\n\n  browser\n      \u2022 Default: OS X: \"open\", Windows: \"start\", Others: \"xdg-open\"\n\n      \u2022 Type: null, Boolean, or String\n\n      The browser that is called by npm commands to open websites.\n\n      Set to false to suppress browser behavior and instead print urls to terminal.\n\n      Set to true to use default system URL opener.\n\n  ca\n      \u2022 Default: null\n\n      \u2022 Type: null or String (can be set multiple times)\n\n      The Certificate Authority signing certificate that is trusted for SSL connections to the registry. Values should be in PEM\n      format (Windows calls it \"Base-64 encoded X.509 (.CER)\") with newlines replaced by the string \"\\n\". For example:\n\n        ca=\"-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----\"\n\n      Set to null to only allow \"known\" registrars, or to a specific CA cert to trust only that specific signing authority.\n\n      Multiple CAs can be trusted by specifying an array of certificates:\n\n        ca[]=\"...\"\n        ca[]=\"...\"\n\n      See also the strict-ssl config.\n\n  cache\n      \u2022 Default: Windows: %LocalAppData%\\npm-cache, Posix: ~/.npm\n\n      \u2022 Type: Path\n\n      The location of npm's cache directory. See npm help npm cache\n\n  cafile\n      \u2022 Default: null\n\n      \u2022 Type: Path\n\n      A path to a file containing one or multiple Certificate Authority signing certificates. Similar to the ca setting, but allows\n      for multiple CA's, as well as for the CA information to be stored in a file on disk.\n\n  call\n      \u2022 Default: \"\"\n\n      \u2022 Type: String\n\n      Optional companion option for npm exec, npx that allows for specifying a custom command to be run along with the installed packages.\n\n        npm exec --package yo --package generator-node --call \"yo node\"\n\n  cert\n      \u2022 Default: null\n\n      \u2022 Type: null or String\n\n      A client certificate to pass when accessing the registry. Values should be in PEM format (Windows calls it \"Base-64 encoded\n      X.509 (.CER)\") with newlines replaced by the string \"\\n\". For example:\n\n        cert=\"-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----\"\n\n      It is not the path to a certificate file (and there is no \"certfile\" option).\n\n  ci-name\n      \u2022 Default: The name of the current CI system, or null when not on a known CI platform.\n\n      \u2022 Type: null or String\n\n      The name of a continuous integration system. If not set explicitly, npm will detect the current CI environment using the\n      @npmcli/ci-detect http://npm.im/@npmcli/ci-detect module.\n\n  cidr\n      \u2022 Default: null\n\n      \u2022 Type: null or String (can be set multiple times)\n\n      This is a list of CIDR address to be used when configuring limited access tokens with the npm token create command.\n\n  color\n      \u2022 Default: true unless the NO_COLOR environ is set to something other than '0'\n\n      \u2022 Type: \"always\" or Boolean\n\n      If false, never shows colors. If \"always\" then always shows colors. If true, then only prints color codes for tty file de\u2010\n      scriptors.\n\n  commit-hooks\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      Run git commit hooks when using the npm version command.\n\n  depth\n      \u2022 Default: Infinity if --all is set, otherwise 1\n\n      \u2022 Type: null or Number\n\n      The depth to go when recursing packages for npm ls.\n\n      If not set, npm ls will show only the immediate dependencies of the root project. If --all is set, then npm will show all dependencies by default.\n\n  description\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      Show the description in npm search\n\n  diff\n      \u2022 Default:\n\n      \u2022 Type: String (can be set multiple times)\n\n      Define arguments to compare in npm diff.\n\n  diff-dst-prefix\n      \u2022 Default: \"b/\"\n\n      \u2022 Type: String\n\n      Destination prefix to be used in npm diff output.\n\n  diff-ignore-all-space\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Ignore whitespace when comparing lines in npm diff.\n\n  diff-name-only\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Prints only filenames when using npm diff.\n\n  diff-no-prefix\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Do not show any source or destination prefix in npm diff output.\n\n      Note: this causes npm diff to ignore the --diff-src-prefix and --diff-dst-prefix configs.\n\n  diff-src-prefix\n      \u2022 Default: \"a/\"\n\n      \u2022 Type: String\n\n      Source prefix to be used in npm diff output.\n\n  diff-text\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Treat all files as text in npm diff.\n\n  diff-unified\n      \u2022 Default: 3\n\n      \u2022 Type: Number\n\n      The number of lines of context to print in npm diff.\n\n  dry-run\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be\n      passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack\n      and publish.\n\n      Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.\n\n  editor\n      \u2022 Default: The EDITOR or VISUAL environment variables, or 'notepad.exe' on Windows, or 'vim' on Unix systems\n\n      \u2022 Type: String\n\n      The command to run for npm edit and npm config edit.\n\n  engine-strict\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If set to true, then npm will stubbornly refuse to install (or even consider installing) any package that claims to not be\n      compatible with the current Node.js version.\n\n      This can be overridden by setting the --force flag.\n\n  fetch-retries\n      \u2022 Default: 2\n\n      \u2022 Type: Number\n\n      The \"retries\" config for the retry module to use when fetching packages from the registry.\n\n      npm will retry idempotent read requests to the registry in the case of network failures or 5xx HTTP errors.\n\n  fetch-retry-factor\n      \u2022 Default: 10\n\n      \u2022 Type: Number\n\n      The \"factor\" config for the retry module to use when fetching packages.\n\n  fetch-retry-maxtimeout\n      \u2022 Default: 60000 (1 minute)\n\n      \u2022 Type: Number\n\n      The \"maxTimeout\" config for the retry module to use when fetching packages.\n\n  fetch-retry-mintimeout\n      \u2022 Default: 10000 (10 seconds)\n\n      \u2022 Type: Number\n\n      The \"minTimeout\" config for the retry module to use when fetching packages.\n\n  fetch-timeout\n      \u2022 Default: 300000 (5 minutes)\n\n      \u2022 Type: Number\n\n      The maximum amount of time to wait for HTTP requests to complete.\n\n  force\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.\n\n      \u2022 Allow clobbering non-npm files in global installs.\n\n      \u2022 Allow the npm version command to work on an unclean git repository.\n\n      \u2022 Allow deleting the cache folder with npm cache clean.\n\n      \u2022 Allow installing packages that have an engines declaration requiring a different version of npm.\n\n      \u2022 Allow installing packages that have an engines declaration requiring a different version of node, even if --engine-strict\n        is enabled.\n\n      \u2022 Allow npm audit fix to install modules outside your stated dependency range (including SemVer-major changes).\n\n      \u2022 Allow unpublishing all versions of a published package.\n\n      \u2022 Allow conflicting peerDependencies to be installed in the root project.\n\n      \u2022 Implicitly set --yes during npm init.\n\n      \u2022 Allow clobbering existing values in npm pkg\n\n      If you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!\n\n  foreground-scripts\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process,\n      sharing standard input, output, and error with the main npm process.\n\n      Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.\n\n  format-package-lock\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      Format package-lock.json or npm-shrinkwrap.json as a human readable file.\n\n  fund\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      When \"true\" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding.\n      See npm help npm fund for details.\n\n  git\n      \u2022 Default: \"git\"\n\n      \u2022 Type: String\n\n      The command to use for git commands. If git is installed on the computer, but is not in the PATH, then set this to the full\n      path to the git binary.\n\n  git-tag-version\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      Tag the commit when using the npm version command.\n\n  global\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Operates in \"global\" mode, so that packages are installed into the prefix folder instead of the current working directory.\n      See npm help folders for more on the differences in behavior.\n\n      \u2022 packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.\n\n      \u2022 bin files are linked to {prefix}/bin\n\n      \u2022 man pages are linked to {prefix}/share/man\n\n  global-style\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Causes npm to install the package into your local node_modules folder with the same layout it uses with the global  node_modules folder. Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their\n      node_modules folders. This obviously will eliminate some deduping. If used with legacy-bundling, legacy-bundling will be pre\u2010\n      ferred.\n\n  globalconfig\n      \u2022 Default: The global --prefix setting plus 'etc/npmrc'. For example, '/usr/local/etc/npmrc'\n\n      \u2022 Type: Path\n\n      The config file to read for global config options.\n\n  heading\n      \u2022 Default: \"npm\"\n\n      \u2022 Type: String\n\n      The string that starts all the debugging log output.\n\n  https-proxy\n      \u2022 Default: null\n\n      \u2022 Type: null or URL\n\n      A  proxy  to use for outgoing https requests. If the HTTPS_PROXY or https_proxy or HTTP_PROXY or http_proxy environment variables are set, proxy settings will be honored by the underlying make-fetch-happen library.\n\n  if-present\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If true, npm will not exit with an error code when run-script is invoked for a script that isn't defined in the scripts  section  of  package.json.  This option can be used when it's desirable to optionally run a script when it's present and fail if\n      the script fails. This is useful, for example, when running scripts that may only apply  for  some  builds  in  an  otherwise\n      generic CI setup.\n\n  ignore-scripts\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If true, npm does not run scripts specified in package.json files.\n\n      Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and\n      npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.\n\n  include\n      \u2022 Default:\n\n      \u2022 Type: \"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\n      Option that allows for defining which types of dependencies to install.\n\n      This is the inverse of --omit=<type>.\n\n      Dependency types specified in --include will not be omitted, regardless of the order in which omit/include are specified on\n      the command-line.\n\n  include-staged\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Allow installing \"staged\" published packages, as defined by npm RFC PR #92 https://github.com/npm/rfcs/pull/92.\n\n      This is experimental, and not implemented by the npm public registry.\n\n  init-author-email\n      \u2022 Default: \"\"\n\n      \u2022 Type: String\n\n      The value npm init should use by default for the package author's email.\n\n  init-author-name\n      \u2022 Default: \"\"\n\n      \u2022 Type: String\n\n      The value npm init should use by default for the package author's name.\n\n  init-author-url\n      \u2022 Default: \"\"\n\n      \u2022 Type: \"\" or URL\n\n      The value npm init should use by default for the package author's homepage.\n\n  init-license\n      \u2022 Default: \"ISC\"\n\n      \u2022 Type: String\n\n      The value npm init should use by default for the package license.\n\n  init-module\n      \u2022 Default: \"~/.npm-init.js\"\n\n      \u2022 Type: Path\n\n      A module that will be loaded by the npm init command. See the documentation for the init-package-json\n      https://github.com/npm/init-package-json module for more information, or npm help init.\n\n  init-version\n      \u2022 Default: \"1.0.0\"\n\n      \u2022 Type: SemVer string\n\n      The value that npm init should use by default for the package version number, if not already set in package.json.\n\n  json\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Whether or not to output JSON data, rather than the normal output.\n\n      \u2022 In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.\n\n      Not supported by all npm commands.\n\n  key\n      \u2022 Default: null\n\n      \u2022 Type: null or String\n\n      A client key to pass when accessing the registry. Values should be in PEM format with newlines replaced by the string \"\\n\".\n      For example:\n\n        key=\"-----BEGIN PRIVATE KEY-----\\nXXXX\\nXXXX\\n-----END PRIVATE KEY-----\"\n\n      It is not the path to a key file (and there is no \"keyfile\" option).\n\n  legacy-bundling\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install\n      the package. This eliminates all automatic deduping. If used with global-style this option will be preferred.\n\n  legacy-peer-deps\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Causes npm to completely ignore peerDependencies when building a package tree, as in npm versions 3 through 6.\n\n      If a package cannot be installed because of overly strict peerDependencies that collide, it provides a way to move forward\n      resolving the situation.\n\n      This differs from --omit=peer, in that --omit=peer will avoid unpacking peerDependencies on disk, but will still design a\n      tree such that peerDependencies could be unpacked in a correct place.\n\n      Use of legacy-peer-deps is not recommended, as it will not enforce the peerDependencies contract that meta-dependencies may\n      rely on.\n\n  link\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Used with npm ls, limiting output to only those packages that are linked.\n\n  local-address\n      \u2022 Default: null\n\n      \u2022 Type: IP Address\n\n      The IP address of the local interface to use when making connections to the npm registry. Must be IPv4 in versions of Node\n      prior to 0.12.\n\n  location\n      \u2022 Default: \"user\" unless --global is passed, which will also set this value to \"global\"\n\n      \u2022 Type: \"global\", \"user\", or \"project\"\n\n      When passed to npm config this refers to which config file to use.\n\n  loglevel\n      \u2022 Default: \"notice\"\n\n      \u2022 Type: \"silent\", \"error\", \"warn\", \"notice\", \"http\", \"timing\", \"info\", \"verbose\", or \"silly\"\n\n      What level of logs to report. On failure, all logs are written to npm-debug.log in the current working directory.\n\n      Any logs of a higher level than the setting are shown. The default is \"notice\".\n\n      See also the foreground-scripts config.\n\n  logs-max\n      \u2022 Default: 10\n\n      \u2022 Type: Number\n\n      The maximum number of log files to store.\n\n  long\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Show extended information in ls, search, and help-search.\n\n  maxsockets\n      \u2022 Default: 15\n\n      \u2022 Type: Number\n\n      The maximum number of connections to use per origin (protocol/host/port combination).\n\n  message\n      \u2022 Default: \"%s\"\n\n      \u2022 Type: String\n\n      Commit message which is used by npm version when creating version commit.\n\n      Any \"%s\" in the message will be replaced with the version number.\n\n  node-options\n      \u2022 Default: null\n\n      \u2022 Type: null or String\n\n      Options to pass through to Node.js via the NODE_OPTIONS environment variable. This does not impact how npm itself is executed\n      but it does impact how lifecycle scripts are called.\n\n  node-version\n      \u2022 Default: Node.js process.version value\n\n      \u2022 Type: SemVer string\n\n      The node version to use when checking a package's engines setting.\n\n  noproxy\n      \u2022 Default: The value of the NO_PROXY environment variable\n\n      \u2022 Type: String (can be set multiple times)\n\n      Domain extensions that should bypass any proxies.\n\n      Also accepts a comma-delimited string.\n\n  npm-version\n      \u2022 Default: Output of npm --version\n\n      \u2022 Type: SemVer string\n\n      The npm version to use when checking a package's engines setting.\n\n  offline\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Force  offline  mode:  no  network  requests will be done during install. To allow the CLI to fill in missing cache data, see\n      --prefer-offline.\n\n  omit\n      \u2022 Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.\n\n      \u2022 Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\n      Dependency types to omit from the installation tree on disk.\n\n      Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just\n      not physically installed on disk.\n\n      If a package type appears in both the --include and --omit lists, then it will be included.\n\n      If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.\n\n  otp\n      \u2022 Default: null\n\n      \u2022 Type: null or String\n\n      This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with\n      npm access.\n\n      If  not  set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for\n      one.\n\n  pack-destination\n      \u2022 Default: \".\"\n\n      \u2022 Type: String\n\n      Directory in which npm pack will save tarballs.\n\n  package\n      \u2022 Default:\n\n      \u2022 Type: String (can be set multiple times)\n\n      The package to install for npm help exec\n\n  package-lock\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      If set to false, then ignore package-lock.json files when installing. This will also  prevent  writing  package-lock.json  if\n      save is true.\n\n      When  package package-locks are disabled, automatic pruning of extraneous modules will also be disabled. To remove extraneous\n      modules with package-locks disabled use npm prune.\n\n  package-lock-only\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If set to true, the current operation will only use the package-lock.json, ignoring node_modules.\n\n      For update this means only the package-lock.json will be updated, instead of checking node_modules and downloading  dependencies.\n\n      For  list  this  means  the  output will be based on the tree described by the package-lock.json, rather than the contents of\n      node_modules.\n\n  parseable\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Output parseable results from commands that write to standard output. For npm search, this will be tab-separated  table  for\u2010\n      mat.\n\n  prefer-offline\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If true, staleness checks for cached data will be bypassed, but missing data will be requested from the server. To force full\n      offline mode, use --offline.\n\n  prefer-online\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If true, staleness checks for cached data will be forced, making the CLI look for updates immediately even for fresh  package\n      data.\n\n  prefix\n      \u2022 Default:  In global mode, the folder where the node executable is installed.  In local mode, the nearest parent folder containing either a package.json file or a node_modules folder.\n\n      \u2022 Type: Path\n\n      The location to install global items. If set on the command line, then it forces non-global commands to run in the  specified\n      folder.\n\n  preid\n      \u2022 Default: \"\"\n\n      \u2022 Type: String\n\n      The \"prerelease identifier\" to use as a prefix for the \"prerelease\" part of a semver. Like the rc in 1.2.0-rc.8.\n\n  progress\n      \u2022 Default: true unless running in a known CI system\n\n      \u2022 Type: Boolean\n\n      When set to true, npm will display a progress bar during time intensive operations, if process.stderr is a TTY.\n\n      Set to false to suppress the progress bar.\n\n  proxy\n      \u2022 Default: null\n\n      \u2022 Type: null, false, or URL\n\n      A proxy to use for outgoing http requests. If the HTTP_PROXY or http_proxy environment variables are set, proxy settings will\n      be honored by the underlying request library.\n\n  read-only\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      This is used to mark a token as unable to publish when configuring limited access tokens with the npm token create command.\n\n  rebuild-bundle\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      Rebuild bundled dependencies after installation.\n\n  registry\n      \u2022 Default: \"https://registry.npmjs.org/\"\n\n      \u2022 Type: URL\n\n      The base URL of the npm registry.\n\n  save\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      Save installed packages to a package.json file as dependencies.\n\n      When used with the npm rm command, removes the dependency from package.json.\n\n  save-bundle\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If a package would be saved at install time by the use of --save, --save-dev, or --save-optional, then also  put  it  in  the\n      bundleDependencies list.\n\n      Ignore if --save-peer is set, since peerDependencies cannot be bundled.\n\n  save-dev\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Save installed packages to a package.json file as devDependencies.\n\n  save-exact\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Dependencies  saved to package.json will be configured with an exact version rather than using npm's default semver range op\u2010\n      erator.\n\n  save-optional\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Save installed packages to a package.json file as optionalDependencies.\n\n  save-peer\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Save installed packages. to a package.json file as peerDependencies\n\n  save-prefix\n      \u2022 Default: \"^\"\n\n      \u2022 Type: String\n\n      Configure how versions of packages installed to a package.json file via --save or --save-dev get prefixed.\n\n      For example if a package has version 1.2.3, by default its version is set to ^1.2.3 which  allows  minor  upgrades  for  that\n      package, but after npm config set save-prefix='~' it would be set to ~1.2.3 which only allows patch upgrades.\n\n  save-prod\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Save  installed packages into dependencies specifically. This is useful if a package already exists in devDependencies or optionalDependencies, but you want to move it to be a non-optional production dependency.\n\n      This is the default behavior if --save is true, and neither --save-dev or --save-optional are true.\n\n  scope\n      \u2022 Default: the scope of the current project, if any, or \"\"\n\n      \u2022 Type: String\n\n      Associate an operation with a scope for a scoped registry.\n\n      Useful when logging in to or out of a private registry:\n\n        # log in, linking the scope to the custom registry\n        npm login --scope=@mycorp --registry=https://registry.mycorp.com\n\n        # log out, removing the link and the auth token\n        npm logout --scope=@mycorp\n\n      This will cause @mycorp to be mapped to the registry for future installation of packages specified according to  the  pattern\n      @mycorp/package.\n\n      This will also cause npm init to create a scoped package.\n\n        # accept all defaults, and create a package named \"@foo/whatever\",\n        # instead of just named \"whatever\"\n        npm init --scope=@foo --yes\n\n  script-shell\n      \u2022 Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows\n\n      \u2022 Type: null or String\n\n      The shell to use for scripts run with the npm exec, npm run and npm init <pkg> commands.\n\n  searchexclude\n      \u2022 Default: \"\"\n\n      \u2022 Type: String\n\n      Space-separated options that limit the results from search.\n\n  searchlimit\n      \u2022 Default: 20\n\n      \u2022 Type: Number\n\n      Number of items to limit search results to. Will not apply at all to legacy searches.\n\n  searchopts\n      \u2022 Default: \"\"\n\n      \u2022 Type: String\n\n      Space-separated options that are always passed to search.\n\n  searchstaleness\n      \u2022 Default: 900\n\n      \u2022 Type: Number\n\n      The age of the cache, in seconds, before another registry request is made if using legacy search endpoint.\n\n  shell\n      \u2022 Default: SHELL environment variable, or \"bash\" on Posix, or \"cmd.exe\" on Windows\n\n      \u2022 Type: String\n\n      The shell to run for the npm explore command.\n\n  sign-git-commit\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If set to true, then the npm version command will commit the new package version using -S to add a signature.\n\n      Note that git requires you to have set up GPG keys in your git configs for this to work properly.\n\n  sign-git-tag\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If set to true, then the npm version command will tag the version using -s to add a signature.\n\n      Note that git requires you to have set up GPG keys in your git configs for this to work properly.\n\n  strict-peer-deps\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If  set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install fail\u2010\n      ure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.\n\n      By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer  dependency\n      specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their pack\u2010\n      age's peerDependencies object.\n\n      When such and override is  performed,  a  warning  is  printed,  explaining  the  conflict  and  the  packages  involved.  If\n      --strict-peer-deps is set, then this warning is treated as a failure.\n\n  strict-ssl\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      Whether or not to do SSL key validation when making requests to the registry via https.\n\n      See also the ca config.\n\n  tag\n      \u2022 Default: \"latest\"\n\n      \u2022 Type: String\n\n      If you ask npm to install a package and don't tell it a specific version, then it will install the specified tag.\n\n      Also the tag that is added to the package@version specified by the npm tag command, if no explicit tag is given.\n\n      When  used  by  the npm diff command, this is the tag used to fetch the tarball that will be compared with the local files by\n      default.\n\n  tag-version-prefix\n      \u2022 Default: \"v\"\n\n      \u2022 Type: String\n\n      If set, alters the prefix used when tagging a new version when performing a version increment using  npm-version.  To  remove\n      the prefix altogether, set it to the empty string: \"\".\n\n      Because  other tools may rely on the convention that npm version tags look like v1.0.0, only use this property if it is absolutely necessary. In particular, use care when overriding this setting for public packages.\n\n  timing\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If true, writes an npm-debug log to _logs and timing information to _timing.json, both in your cache,  even  if  the  command\n      completes successfully. _timing.json is a newline delimited list of JSON objects.\n\n      You can quickly view it with this json https://npm.im/json command line: npm exec -- json -g < ~/.npm/_timing.json.\n\n  umask\n      \u2022 Default: 0\n\n      \u2022 Type: Octal numeric string in range 0000..0777 (0..511)\n\n      The \"umask\" value to use when setting the file creation mode on files and folders.\n\n      Folders  and  executables  are  given  a mode which is 0o777 masked against this value. Other files are given a mode which is\n      0o666 masked against this value.\n\n      Note that the underlying system will also apply its own umask value to files and folders that are created, and npm  does  not\n      circumvent this, but rather adds the --umask config to it.\n\n      Thus,  the effective default umask value on most POSIX systems is 0o22, meaning that folders and executables are created with\n      a mode of 0o755 and other files are created with a mode of 0o644.\n\n  unicode\n      \u2022 Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the LC_ALL, LC_CTYPE, or LANG  en\u2010\n        environment variables.\n\n      \u2022 Type: Boolean\n\n      When  set  to  true,  npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode\n      glyphs.\n\n  update-notifier\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      Set to false to suppress the update notification when using an older version of npm than the latest.\n\n  usage\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Show short usage output about the command specified.\n\n  user-agent\n      \u2022 Default: \"npm/{npm-version} node/{node-version} {platform} {arch} workspaces/{workspaces} {ci}\"\n\n      \u2022 Type: String\n\n      Sets the User-Agent request header. The following fields are replaced with their actual counterparts:\n\n      \u2022 {npm-version} - The npm version in use\n\n      \u2022 {node-version} - The Node.js version in use\n\n      \u2022 {platform} - The value of process.platform\n\n      \u2022 {arch} - The value of process.arch\n\n      \u2022 {workspaces} - Set to true if the workspaces or workspace options are set.\n\n      \u2022 {ci} - The value of the ci-name config, if set, prefixed with ci/, or an empty string if ci-name is empty.\n\n  userconfig\n      \u2022 Default: \"~/.npmrc\"\n\n      \u2022 Type: Path\n\n      The location of user-level configuration settings.\n\n      This may be overridden by the npm_config_userconfig environment variable or the --userconfig command line option, but may not\n      be overridden by settings in the globalconfig file.\n\n  version\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If true, output the npm version and exit successfully.\n\n      Only relevant when specified explicitly on the command line.\n\n  versions\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      If  true,  output  the  npm version as well as node's process.versions map and the version in the current working directory's\n      package.json file if one exists, and exit successfully.\n\n      Only relevant when specified explicitly on the command line.\n\n  viewer\n      \u2022 Default: \"man\" on Posix, \"browser\" on Windows\n\n      \u2022 Type: String\n\n      The program to use to view help content.\n\n      Set to \"browser\" to view html help content in the default web browser.\n\n  which\n      \u2022 Default: null\n\n      \u2022 Type: null or Number\n\n      If there are multiple funding sources, which 1-indexed source URL to open.\n\n  workspace\n      \u2022 Default:\n\n      \u2022 Type: String (can be set multiple times)\n\n      Enable running a command in the context of the configured workspaces of the current project while filtering by  running  only\n      the workspaces defined by this configuration option.\n\n      Valid values for the workspace config are either:\n\n      \u2022 Workspace names\n\n      \u2022 Path to a workspace directory\n\n      \u2022 Path to a parent workspace directory (will result to selecting all of the nested workspaces)\n\n      When  set  for  the  npm  init  command, this may be set to the folder of a workspace which does not yet exist, to create the\n      folder and set it up as a brand new workspace within the project.\n\n      This value is not exported to the environment for child processes.\n\n  workspaces\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      Enable running a command in the context of all the configured workspaces.\n\n      This value is not exported to the environment for child processes.\n\n  yes\n      \u2022 Default: null\n\n      \u2022 Type: null or Boolean\n\n      Automatically answer \"yes\" to any prompts that npm might print on the command line.\n\n  also\n      \u2022 Default: null\n\n      \u2022 Type: null, \"dev\", or \"development\"\n\n      \u2022 DEPRECATED: Please use --include=dev instead.\n\n      When set to dev or development, this is an alias for --include=dev.\n\n  auth-type\n      \u2022 Default: \"legacy\"\n\n      \u2022 Type: \"legacy\", \"sso\", \"saml\", or \"oauth\"\n\n      \u2022 DEPRECATED: This method of SSO/SAML/OAuth is deprecated and will be removed  in  a  future  version  of  npm  in  favor  of\n        web-based login.\n\n      What authentication strategy to use with adduser/login.\n\n  cache-max\n      \u2022 Default: Infinity\n\n      \u2022 Type: Number\n\n      \u2022 DEPRECATED: This option has been deprecated in favor of --prefer-online\n\n      --cache-max=0 is an alias for --prefer-online\n\n  cache-min\n      \u2022 Default: 0\n\n      \u2022 Type: Number\n\n      \u2022 DEPRECATED: This option has been deprecated in favor of --prefer-offline.\n\n      --cache-min=9999 (or bigger) is an alias for --prefer-offline.\n\n  dev\n      \u2022 Default: false\n\n      \u2022 Type: Boolean\n\n      \u2022 DEPRECATED: Please use --include=dev instead.\n\n      Alias for --include=dev.\n\n  init.author.email\n      \u2022 Default: \"\"\n\n      \u2022 Type: String\n\n      \u2022 DEPRECATED: Use --init-author-email instead.\n\n      Alias for --init-author-email\n\n  init.author.name\n      \u2022 Default: \"\"\n\n      \u2022 Type: String\n\n      \u2022 DEPRECATED: Use --init-author-name instead.\n\n      Alias for --init-author-name\n\n  init.author.url\n      \u2022 Default: \"\"\n\n      \u2022 Type: \"\" or URL\n\n      \u2022 DEPRECATED: Use --init-author-url instead.\n\n      Alias for --init-author-url\n\n  init.license\n      \u2022 Default: \"ISC\"\n\n      \u2022 Type: String\n\n      \u2022 DEPRECATED: Use --init-license instead.\n\n      Alias for --init-license\n\n  init.module\n      \u2022 Default: \"~/.npm-init.js\"\n\n      \u2022 Type: Path\n\n      \u2022 DEPRECATED: Use --init-module instead.\n\n      Alias for --init-module\n\n  init.version\n      \u2022 Default: \"1.0.0\"\n\n      \u2022 Type: SemVer string\n\n      \u2022 DEPRECATED: Use --init-version instead.\n\n      Alias for --init-version\n\n  only\n      \u2022 Default: null\n\n      \u2022 Type: null, \"prod\", or \"production\"\n\n      \u2022 DEPRECATED: Use --omit=dev to omit dev dependencies from the install.\n\n      When set to prod or production, this is an alias for --omit=dev.\n\n  optional\n      \u2022 Default: null\n\n      \u2022 Type: null or Boolean\n\n      \u2022 DEPRECATED: Use --omit=optional to exclude optional dependencies, or --include=optional to include them.\n\n      Default value does install optional deps unless otherwise omitted.\n\n      Alias for --include=optional or --omit=optional\n\n  production\n      \u2022 Default: null\n\n      \u2022 Type: null or Boolean\n\n      \u2022 DEPRECATED: Use --omit=dev instead.\n\n      Alias for --omit=dev\n\n  shrinkwrap\n      \u2022 Default: true\n\n      \u2022 Type: Boolean\n\n      \u2022 DEPRECATED: Use the --package-lock setting instead.\n\n      Alias for --package-lock\n\n  sso-poll-frequency\n      \u2022 Default: 500\n\n      \u2022 Type: Number\n\n      \u2022 DEPRECATED:  The  --auth-type method of SSO/SAML/OAuth will be removed in a future version of npm in favor of web-based lo\u2010\n        gin.\n\n      When used with SSO-enabled auth-types, configures how regularly the registry should be polled while the  user  is  completing\n      authentication.\n\n  sso-type\n      \u2022 Default: \"oauth\"\n\n      \u2022 Type: null, \"oauth\", or \"saml\"\n\n      \u2022 DEPRECATED:  The  --auth-type method of SSO/SAML/OAuth will be removed in a future version of npm in favor of web-based lo\u2010\n        gin.\n\n      If --auth-type=sso, the type of SSO type to use.\n\n  tmp\n      \u2022 Default: The value returned by the Node.js os.tmpdir() method https://nodejs.org/api/os.html#os_os_tmpdir\n\n      \u2022 Type: Path\n\n      \u2022 DEPRECATED: This setting is no longer used. npm stores temporary files in a special location in the  cache,  and  they  are\n        managed by cacache http://npm.im/cacache.\n\n      Historically, the location where temporary files were stored. No longer relevant.\n */\n"],
  "mappings": "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",
  "names": ["import_process", "path", "semver", "import_inquirer", "import_process", "defDesc", "defDbg", "defSh", "deflo", "defV", "defEnv", "op", "fn", "input", "useLoopback", "useShell", "useDebug", "description", "useVerbose", "output", "result", "e", "opCurry", "env", "OpsPipeline", "_OpsPipeline", "useNestingDebug", "useNestingVerbose", "useNestingLog", "useNestingSilent", "operation", "queueOpsPl", "envExtras", "isOp", "isPipeline", "callableOpLike", "fallback", "_a", "enqueueable", "targetForFailsafe", "flOpsList", "pipelineOutputValve", "nextOp", "flOpsQueue", "nextFlOp", "flOutput", "unsafeCLICharsRegex", "argSanitize", "rawArg", "argvSanitize", "rawArgv", "Readline", "import_process", "import_child_process", "import_util", "createAsyncInterface", "options", "AsyncReadlineInterface", "query", "resolve", "responce", "rl", "asyncExecFile", "execFileCallback", "utilPromise", "asyncExecFile", "execFile", "utilPromise", "Pkg", "_Pkg", "argSanitize", "argvSanitize", "#_id", "#_version", "newName", "newVer", "name", "location", "opts", "raw", "currentDir", "result", "pkgs", "pkg", "terms", "cd", "args", "command", "pkgComToOpt", "opt", "optName", "optMatch", "match", "optVal", "pkgSearchResults", "results", "res", "resFields", "pkgPack", "pkgSearchQ", "OpsPipeline", "opts", "args", "pkgs", "i", "name", "Pkg", "pkg", "foundPkgs", "res", "pkgConfirmQ", "OpsPipeline", "opts", "pkgs", "pkg", "inquirer", "nullPkg", "pkgSearchResults", "i", "pkgInstallQ", "OpsPipeline", "opts", "pkgs", "location", "pkgNames", "pkg", "npmOptions", "pkgComToOpt", "res", "Pkg", "import_os", "import_promises", "import_fs_extra", "import_path", "basename", "join", "path", "PackageJSON", "PackageJSONEncodingFormat", "readPkgJSON", "containingDirPath", "file", "writePkgJSON", "newPkgJSON", "signal", "makeTmpDir", "prefix", "moveToDir", "dest", "removeDir", "dirName", "import_commander", "import_commander", "verboseHandler", "_", "previousVerbosityLevel", "dbgHandler", "previousDebugLevel", "commander", "argParserQ", "OpsPipeline", "argv", "parser", "argvSanitize", "args", "argParser", "Q", "command", "options", "_a", "tmpDir", "options", "command", "opts", "verboseLog", "args", "env", "OpsPipeline", "argParserQ", "pkgSearchQ", "pkgConfirmQ", "pkgs", "makeTmpDir", "pkgInstallQ", "pkg", "pkgPath", "pkgJSON", "readPkgJSON", "writePkgJSON", "pkgPack", "moveToDir", "removeDir", "commander"]
}
